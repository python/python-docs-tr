# Python Documentation Turkish Translation
# Copyright (C) 2001-2022, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-02 04:25-0500\n"
"PO-Revision-Date: 2022-02-20 19:35+0300\n"
"Last-Translator: \n"
"Language-Team: TURKISH <python.docs.tr@gmail.com>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.0.1\n"

#: tutorial/errors.rst:5
msgid "Errors and Exceptions"
msgstr "Hatalar ve Özel Durumlar"

#: tutorial/errors.rst:7
msgid ""
"Until now error messages haven't been more than mentioned, but if you have "
"tried out the examples you have probably seen some.  There are (at least) "
"two distinguishable kinds of errors: *syntax errors* and *exceptions*."
msgstr ""
"Şimdiye kadar hata mesajlarından fazla bahsedilmedi, ancak örnekleri "
"denediyseniz muhtemelen bazılarını görmüşsünüzdür.  (En azından) iki ayırt "
"edilebilir hata türü vardır: *söz dizimi hataları* (*syntax errors*) ve "
"*özel durumlar* (*exceptions*)."

#: tutorial/errors.rst:15
msgid "Syntax Errors"
msgstr "Söz Dizimi Hataları"

#: tutorial/errors.rst:17
msgid ""
"Syntax errors, also known as parsing errors, are perhaps the most common "
"kind of complaint you get while you are still learning Python::"
msgstr ""
"Ayrıştırma hataları olarak da bilinen söz dizimi hataları, Python öğrenirken "
"belki de en sık karşılaşılan hatalardan biridir::"

#: tutorial/errors.rst:26
msgid ""
"The parser repeats the offending line and displays a little 'arrow' pointing "
"at the earliest point in the line where the error was detected.  The error "
"is caused by (or at least detected at) the token *preceding* the arrow: in "
"the example, the error is detected at the function :func:`print`, since a "
"colon (``':'``) is missing before it.  File name and line number are printed "
"so you know where to look in case the input came from a script."
msgstr ""
"Ayrıştırıcı, hatalı satırı yineler ve hatanın algılandığı en erken noktayı "
"gösteren küçük bir 'ok' görüntüler. Hata oktan *önceki* dizgede meydana  "
"gelmiştir: örnekte, hata :func:`print` fonksiyonunda algılanır, çünkü "
"öncesinde iki nokta üst üste (``':'``) eksiktir.  Dosya adı ve satır "
"numarası yazdırılır, böylece girişin bir komut dosyasından gelmesi durumunda "
"nereye bakacağınızı bilirsiniz."

#: tutorial/errors.rst:37
msgid "Exceptions"
msgstr "Özel Durumlar"

#: tutorial/errors.rst:39
msgid ""
"Even if a statement or expression is syntactically correct, it may cause an "
"error when an attempt is made to execute it. Errors detected during "
"execution are called *exceptions* and are not unconditionally fatal: you "
"will soon learn how to handle them in Python programs.  Most exceptions are "
"not handled by programs, however, and result in error messages as shown "
"here::"
msgstr ""
"Bir komut veya ifade söz dizimsel olarak doğru olsa bile, yürütülmeye "
"çalışıldığında hataya neden olabilir. Yürütme sırasında algılanan hatalara "
"*exceptions (özel durumlar)* denir ve bazıları programlar için kritik "
"değildir: yakında Python programlarında bunların üstesinden gelmeyi "
"öğreneceksiniz.  Ancak, çoğu özel durum programlar tarafından önlenemez ve "
"burada gösterildiği gibi hata iletileriyle sonuçlanır::"

#: tutorial/errors.rst:58
msgid ""
"The last line of the error message indicates what happened. Exceptions come "
"in different types, and the type is printed as part of the message: the "
"types in the example are :exc:`ZeroDivisionError`, :exc:`NameError` and :exc:"
"`TypeError`. The string printed as the exception type is the name of the "
"built-in exception that occurred.  This is true for all built-in exceptions, "
"but need not be true for user-defined exceptions (although it is a useful "
"convention). Standard exception names are built-in identifiers (not reserved "
"keywords)."
msgstr ""
"Hata iletisinin son satırı hataya neyin sebep olduğu gösterir. Özel durumlar "
"farklı türlerde gelir ve tür iletinin bir parçası olarak yazdırılır: "
"örnekteki türler şunlardır :exc:`ZeroDivisionError`, :exc:`NameError` ve :"
"exc:`TypeError`. Özel durum türü olarak yazdırılan dize, oluşan gömülü özel "
"durumun adıdır. Bu, tüm gömülü özel durumlar için geçerlidir, ancak "
"kullanıcı tanımlı özel durumlar için doğru olması gerekmez (yararlı bir "
"kural olmasına rağmen). Standart özel durum adları gömülü tanımlayıcılardır "
"(ayrılmış anahtar sözcükler değildir)."

#: tutorial/errors.rst:66
msgid ""
"The rest of the line provides detail based on the type of exception and what "
"caused it."
msgstr ""
"Satırın geri kalanı, özel durum türüne ve buna neyin neden olduğuna bağlı "
"olarak ayrıntı gösterir."

#: tutorial/errors.rst:69
msgid ""
"The preceding part of the error message shows the context where the "
"exception occurred, in the form of a stack traceback. In general it contains "
"a stack traceback listing source lines; however, it will not display lines "
"read from standard input."
msgstr ""
"Hata iletisinin önceki bölümü, özel durumun oluştuğu bağlamı yığın izleme "
"geri dönüşü biçiminde gösterir. Genel olarak, kaynak satırları listeleyen "
"bir yığın izleme listesi içerir; ancak, standart girişten okunan satırları "
"görüntülemez."

#: tutorial/errors.rst:74
msgid ""
":ref:`bltin-exceptions` lists the built-in exceptions and their meanings."
msgstr ""
":ref:`bltin-exceptions` yerleşik özel durumları ve anlamlarını listeler."

#: tutorial/errors.rst:80
msgid "Handling Exceptions"
msgstr "Özel Durumları İşleme"

#: tutorial/errors.rst:82
msgid ""
"It is possible to write programs that handle selected exceptions. Look at "
"the following example, which asks the user for input until a valid integer "
"has been entered, but allows the user to interrupt the program (using :kbd:"
"`Control-C` or whatever the operating system supports); note that a user-"
"generated interruption is signalled by raising the :exc:`KeyboardInterrupt` "
"exception. ::"
msgstr ""
"Seçili özel durumları işleyen programlar yazmak mümkündür. Geçerli bir tam "
"sayı girilene kadar kullanıcıdan giriş isteyen, ancak kullanıcının programı "
"kesmesine izin veren aşağıdaki örneğe bakın (:kbd:`Control-C` veya işletim "
"sistemi ne destekliyorsa onu kullanarak); kullanıcı kaynaklı kesintilerin :"
"exc:`KeyboardInterrupt` özel durumu ile gösterildiğini unutmayın. ::"

#: tutorial/errors.rst:96
msgid "The :keyword:`try` statement works as follows."
msgstr ":keyword:`try` ifadesi aşağıdaki gibi çalışır."

#: tutorial/errors.rst:98
msgid ""
"First, the *try clause* (the statement(s) between the :keyword:`try` and :"
"keyword:`except` keywords) is executed."
msgstr ""
"İlk olarak, *try yan tümcesi* (:keyword:`try` ve :keyword:`except` anahtar "
"kelimeleri arasındaki ifadeler) yürütülür."

#: tutorial/errors.rst:101
msgid ""
"If no exception occurs, the *except clause* is skipped and execution of the :"
"keyword:`try` statement is finished."
msgstr ""
"Özel durum oluşmazsa, *except yan tümcesi* atlanır ve :keyword:`try` "
"ifadesinin yürütülmesi tamamlanır."

#: tutorial/errors.rst:104
msgid ""
"If an exception occurs during execution of the :keyword:`try` clause, the "
"rest of the clause is skipped.  Then, if its type matches the exception "
"named after the :keyword:`except` keyword, the *except clause* is executed, "
"and then execution continues after the try/except block."
msgstr ""
":keyword:`try` yan tümcesinin yürütülmesi sırasında bir özel durum oluşursa, "
"yan tümcenin geri kalanı atlanır.  Daha sonra belirtilen :keyword:`except` "
"türü ile karşılaşılırsa, *except yan tümcesi* yürütülür ve try/except "
"bloğundan sonra yürütme devam eder."

#: tutorial/errors.rst:109
msgid ""
"If an exception occurs which does not match the exception named in the "
"*except clause*, it is passed on to outer :keyword:`try` statements; if no "
"handler is found, it is an *unhandled exception* and execution stops with a "
"message as shown above."
msgstr ""
"*except yan tümcesinde* adı geçen özel durumla eşleşmeyen bir özel durum "
"oluşursa, daha dışarıda olan :keyword:`try` ifadelerine geçirilir; işleyici "
"bulunamazsa, bu bir *işlenmeyen özel durum* olur ve yürütme yukarıda "
"gösterildiği gibi bir iletiyle durur."

#: tutorial/errors.rst:114
msgid ""
"A :keyword:`try` statement may have more than one *except clause*, to "
"specify handlers for different exceptions.  At most one handler will be "
"executed. Handlers only handle exceptions that occur in the corresponding "
"*try clause*, not in other handlers of the same :keyword:`!try` statement.  "
"An *except clause* may name multiple exceptions as a parenthesized tuple, "
"for example::"
msgstr ""
":keyword:`try` ifadesi, farklı özel durumlar için işleyiciler belirtmek "
"üzere birden fazla *except yan tümcesi* alabilir.  Maksimum bir tane "
"işleyici yürütülür. İşleyiciler yalnızca karşılık gelen *try yan tümcesinde* "
"oluşan özel durumları işler, aynı :keyword:`!try` ifadesinin diğer "
"işleyicilerinde işlemez.  *except yan tümcesi* birden çok özel durumu "
"parantezli demet olarak adlandırabilir, örneğin::"

#: tutorial/errors.rst:123
msgid ""
"A class in an :keyword:`except` clause is compatible with an exception if it "
"is the same class or a base class thereof (but not the other way around --- "
"an *except clause* listing a derived class is not compatible with a base "
"class). For example, the following code will print B, C, D in that order::"
msgstr ""
":keyword:`except` yan tümcesi, aynı sınıf veya temel sınıf ise özel durum "
"ile uyumludur (ancak türetilmiş bir sınıfı listeleyen *except yan tümcesi* "
"temel sınıfla uyumlu olmadığından  tersi olamaz). Örneğin, aşağıdaki kod B, "
"C, D'yi bu sırada yazdırır::"

#: tutorial/errors.rst:147
msgid ""
"Note that if the *except clauses* were reversed (with ``except B`` first), "
"it would have printed B, B, B --- the first matching *except clause* is "
"triggered."
msgstr ""
"*except yan tümceleri* tersine çevrilmişse (ilk olarak ``except B`` ile) B, "
"B, B şeklinde yazdırılacaktır --- ilk eşleşen *except yan tümcesi* "
"tetiklenir."

#: tutorial/errors.rst:150
msgid ""
"All exceptions inherit from :exc:`BaseException`, and so it can be used to "
"serve as a wildcard. Use this with extreme caution, since it is easy to mask "
"a real programming error in this way!  It can also be used to print an error "
"message and then re-raise the exception (allowing a caller to handle the "
"exception as well)::"
msgstr ""
"Tüm özel durumlar :exc:`BaseException` 'dan kalıt alınır ve böylece joker "
"karakter olarak kullanılabilir. Bunu çok dikkatli kullanın, çünkü gerçek bir "
"programlama hatasını bu şekilde maskelemek kolaydır!  Ayrıca, bir hata "
"iletisi yazdırmak ve sonra özel durumu yeniden yükseltmek için de "
"kullanılabilir (çağıranın özel durumu işlemesine izin vermek)::"

#: tutorial/errors.rst:169
msgid ""
"Alternatively the last except clause may omit the exception name(s), however "
"the exception value must then be retrieved from ``sys.exc_info()[1]``."
msgstr ""
"Alternatif olarak, son özel durum yan tümcesi özel durum ad(ları)nı "
"atlayabilir, ancak özel durum değeri daha sonra ``sys.exc_info()[1]`` 'den "
"alınmalıdır."

#: tutorial/errors.rst:172
msgid ""
"The :keyword:`try` ... :keyword:`except` statement has an optional *else "
"clause*, which, when present, must follow all *except clauses*.  It is "
"useful for code that must be executed if the *try clause* does not raise an "
"exception. For example::"
msgstr ""
":keyword:`try` ... :keyword:`except` ifadesinin isteğe bağlı bir *else yan "
"tümcesi* vardır, bu da mevcut olduğunda tüm *except yan tümcelerini* "
"izlemelidir.  *try yan tümcesi* bir özel durum oluşturmazsa yürütülmesi "
"gereken kod için yararlıdır. Mesela::"

#: tutorial/errors.rst:186
msgid ""
"The use of the :keyword:`!else` clause is better than adding additional code "
"to the :keyword:`try` clause because it avoids accidentally catching an "
"exception that wasn't raised by the code being protected by the :keyword:`!"
"try` ... :keyword:`!except` statement."
msgstr ""
":keyword:`!else` yan tümcesinin kullanılması, :keyword:`try` yan tümcesine "
"ek kod eklemekten daha iyidir çünkü yanlışlıkla :keyword:`!try` tarafından "
"korunan kod tarafından oluşturulmamış bir istisnayı yakalamayı önler. ... :"
"keyword:`!except` ifadesi."

#: tutorial/errors.rst:191
msgid ""
"When an exception occurs, it may have an associated value, also known as the "
"exception's *argument*. The presence and type of the argument depend on the "
"exception type."
msgstr ""
"Bir istisna oluştuğunda, istisnanın *argümanı* olarak da bilinen ilişkili "
"bir değeri olabilir. Argümanın varlığı ve türü, istisna türüne bağlıdır."

#: tutorial/errors.rst:195
msgid ""
"The *except clause* may specify a variable after the exception name.  The "
"variable is bound to an exception instance with the arguments stored in "
"``instance.args``.  For convenience, the exception instance defines :meth:"
"`__str__` so the arguments can be printed directly without having to "
"reference ``.args``.  One may also instantiate an exception first before "
"raising it and add any attributes to it as desired. ::"
msgstr ""
"*except yan tümcesi*, istisna adından sonra bir değişken belirtebilir. "
"Değişken, ``instance.args`` içinde depolanan bağımsız değişkenlerle bir "
"istisna örneğine bağlıdır. Kolaylık sağlamak için, istisna örneği :meth:"
"`__str__` öğesini tanımlar, böylece argümanlar ``.args`` öğesine başvurmak "
"zorunda kalmadan doğrudan yazdırılabilir. Ayrıca, bir istisna, onu "
"yükseltmeden önce başlatabilir ve istendiği gibi ona herhangi bir nitelik "
"ekleyebilir. ::"

#: tutorial/errors.rst:219
msgid ""
"If an exception has arguments, they are printed as the last part ('detail') "
"of the message for unhandled exceptions."
msgstr ""
"Bir istisnanın argümanları varsa, bunlar işlenmeyen istisnalar için mesajın "
"son kısmı ('ayrıntı') olarak yazdırılır."

#: tutorial/errors.rst:222
msgid ""
"Exception handlers don't just handle exceptions if they occur immediately in "
"the *try clause*, but also if they occur inside functions that are called "
"(even indirectly) in the *try clause*. For example::"
msgstr ""
"İstisna işleyicileri, istisnaları yalnızca *try yan tümcesinde* hemen ortaya "
"çıktıklarında değil, aynı zamanda *try yan tümcesinde* çağrılan (dolaylı "
"olarak bile) işlevlerin içinde ortaya çıktıklarında da ele alırlar. Örneğin::"

#: tutorial/errors.rst:240
msgid "Raising Exceptions"
msgstr "Hata Ortaya Çıkartma"

#: tutorial/errors.rst:242
msgid ""
"The :keyword:`raise` statement allows the programmer to force a specified "
"exception to occur. For example::"
msgstr ""
":keyword:`raise` ifadesi, programcının belirli bir istisnanın "
"gerçekleşmesini zorlamasını sağlar. Örneğin::"

#: tutorial/errors.rst:250
msgid ""
"The sole argument to :keyword:`raise` indicates the exception to be raised. "
"This must be either an exception instance or an exception class (a class "
"that derives from :class:`Exception`).  If an exception class is passed, it "
"will be implicitly instantiated by calling its constructor with no "
"arguments::"
msgstr ""
":keyword:`raise` için tek argüman, ortaya çıkacak istisnayı belirtir. Bu, "
"bir istisna örneği veya bir istisna sınıfı (:class:`Exception` dan türetilen "
"bir sınıf) olmalıdır. Argüman verilmezse, yapıcısı hiçbir argüman olmadan "
"çağrılarak örtük olarak başlatılacaktır::"

#: tutorial/errors.rst:257
msgid ""
"If you need to determine whether an exception was raised but don't intend to "
"handle it, a simpler form of the :keyword:`raise` statement allows you to re-"
"raise the exception::"
msgstr ""
"Bir istisnanın oluşturulup oluşturulmadığını belirlemeniz gerekiyorsa ancak "
"onu işlemeyi düşünmüyorsanız, :keyword:`raise` ifadesinin daha basit bir "
"biçimi, istisnayı yeniden oluşturmanıza olanak tanır::"

#: tutorial/errors.rst:276
msgid "Exception Chaining"
msgstr "İstisna Zincirleme"

#: tutorial/errors.rst:278
msgid ""
"If an unhandled exception occurs inside an :keyword:`except` section, it "
"will have the exception being handled attached to it and included in the "
"error message::"
msgstr ""

#: tutorial/errors.rst:297
msgid ""
"To indicate that an exception is a direct consequence of another, the :"
"keyword:`raise` statement allows an optional :keyword:`from<raise>` clause::"
msgstr ""

#: tutorial/errors.rst:303
msgid "This can be useful when you are transforming exceptions. For example::"
msgstr "Bu, özel durumları dönüştürürken yararlı olabilir. Mesela::"

#: tutorial/errors.rst:324
msgid ""
"It also allows disabling automatic exception chaining using the ``from "
"None`` idiom::"
msgstr ""

#: tutorial/errors.rst:336
msgid ""
"For more information about chaining mechanics, see :ref:`bltin-exceptions`."
msgstr ""
"Zincirleme mekaniği hakkında daha fazla bilgi için bkz. :ref:`bltin-"
"exceptions`."

#: tutorial/errors.rst:342
msgid "User-defined Exceptions"
msgstr "Kullanıcı Tanımlı İstisnalar"

#: tutorial/errors.rst:344
msgid ""
"Programs may name their own exceptions by creating a new exception class "
"(see :ref:`tut-classes` for more about Python classes).  Exceptions should "
"typically be derived from the :exc:`Exception` class, either directly or "
"indirectly."
msgstr ""
"Programlar yeni bir istisna sınıfı oluşturarak kendi özel durumlarını "
"adlandırabilir (Python sınıfları hakkında daha fazla bilgi için bkz: :ref:"
"`tut-classes` ).  Özel durumlar genellikle doğrudan veya dolaylı olarak :exc:"
"`Exception` sınıfından türetilmelidir."

#: tutorial/errors.rst:348
#, fuzzy
msgid ""
"Exception classes can be defined which do anything any other class can do, "
"but are usually kept simple, often only offering a number of attributes that "
"allow information about the error to be extracted by handlers for the "
"exception."
msgstr ""
"İstisna sınıfları, başka bir sınıfın yapabileceği her şeyi yapan "
"sınıflarolarak tanımlanabilir, ancak genellikle basit tutulur, genellikle "
"yalnızca hata hakkındaki bilgilerin özel durum için işleyiciler tarafından "
"ayıklanmasına izin veren bir dizi özellik sunar.  Birkaç farklı hata "
"oluşturabilecek bir modül oluştururken, yaygın bir uygulama, bu modül "
"tarafından tanımlanan özel durumlar için bir temel sınıf ve farklı hata "
"koşulları için belirli özel durum sınıfları oluşturmak için bir alt sınıf "
"oluşturmaktır::"

#: tutorial/errors.rst:352
msgid ""
"Most exceptions are defined with names that end in \"Error\", similar to the "
"naming of the standard exceptions."
msgstr ""
"Çoğu özel durum, standart özel durumların adlandırışına benzer şekilde "
"\"Hata\" ile biten adlarla tanımlanır."

#: tutorial/errors.rst:355
msgid ""
"Many standard modules define their own exceptions to report errors that may "
"occur in functions they define.  More information on classes is presented in "
"chapter :ref:`tut-classes`."
msgstr ""
"Birçok standart modül, tanımladıkları işlevlerde oluşabilecek hataları "
"bildirmek için kendi istisnalarını tanımlar.  Dersler hakkında daha fazla "
"bilgi :ref:`tut-classes` bölümünde sunulmaktadır."

#: tutorial/errors.rst:363
msgid "Defining Clean-up Actions"
msgstr "Temizleme Eylemlerini Tanımlama"

#: tutorial/errors.rst:365
msgid ""
"The :keyword:`try` statement has another optional clause which is intended "
"to define clean-up actions that must be executed under all circumstances.  "
"For example::"
msgstr ""
":keyword:`!try` deyimi, her koşulda yürütülmesi gereken temizleme "
"eylemlerini tanımlamayı amaçlayan başka bir opsiyonel yan tümceye sahiptir.  "
"Mesela::"

#: tutorial/errors.rst:379
msgid ""
"If a :keyword:`finally` clause is present, the :keyword:`!finally` clause "
"will execute as the last task before the :keyword:`try` statement completes. "
"The :keyword:`!finally` clause runs whether or not the :keyword:`!try` "
"statement produces an exception. The following points discuss more complex "
"cases when an exception occurs:"
msgstr ""
"Bir :keyword:`finally` yan tümcesi varsa, :keyword:`finally` yan tümcesi :"
"keyword:`try` deyimi tamamlanmadan önceki son görev olarak yürütülür. :"
"keyword:`!finally` yan tümcesi :keyword:`!try` deyiminin bir istisna "
"oluşturup oluşturmadığından bağımsız çalışır. Aşağıdaki noktalarda, bir "
"istisna oluştuğunda daha karmaşık durumlar anlatılmaktadır:"

#: tutorial/errors.rst:385
msgid ""
"If an exception occurs during execution of the :keyword:`!try` clause, the "
"exception may be handled by an :keyword:`except` clause. If the exception is "
"not handled by an :keyword:`!except` clause, the exception is re-raised "
"after the :keyword:`!finally` clause has been executed."
msgstr ""
":keyword:`!try` yan tümcesinin yürütülmesi sırasında bir istisna oluşursa, "
"istisna bir :keyword:`except` yan tümcesi tarafından işlenebilir. İstisna "
"bir :keyword:`!except` yan tümcesi tarafından ele alınmıyorsa, istisna :"
"keyword:`!finally` yan tümcesi yürütüldükten sonra yeniden oluşturulur."

#: tutorial/errors.rst:391
msgid ""
"An exception could occur during execution of an :keyword:`!except` or :"
"keyword:`!else` clause. Again, the exception is re-raised after the :keyword:"
"`!finally` clause has been executed."
msgstr ""
"Bir :keyword:`!except` veya :keyword:`!else` yan tümcesinin yürütülmesi "
"sırasında bir istisna oluşabilir. Yine, istisna, :keyword:`!finally` yan "
"tümcesi yürütüldükten sonra yeniden oluşturulur."

#: tutorial/errors.rst:395
msgid ""
"If the :keyword:`!finally` clause executes a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, exceptions are not re-raised."
msgstr ""
":keyword:`!finally` yan tümcesi bir :keyword:`break`, :keyword:`continue` "
"veya :keyword:`return` deyimini yürütürse, istisnalar yeniden oluşturulmaz."

#: tutorial/errors.rst:399
msgid ""
"If the :keyword:`!try` statement reaches a :keyword:`break`, :keyword:"
"`continue` or :keyword:`return` statement, the :keyword:`!finally` clause "
"will execute just prior to the :keyword:`!break`, :keyword:`!continue` or :"
"keyword:`!return` statement's execution."
msgstr ""
":keyword:`!try` ifadesi bir :keyword:`break`, :keyword:`continue` veya :"
"keyword:`return` ifadesine ulaşırsa, :keyword:`!finally` yan tümcesi :"
"keyword:`!break`, :keyword:`!continue` veya :keyword:`!return` ifadesinin "
"yürütülmesinin hemen öncesinde yürütülür."

#: tutorial/errors.rst:405
msgid ""
"If a :keyword:`!finally` clause includes a :keyword:`!return` statement, the "
"returned value will be the one from the :keyword:`!finally` clause's :"
"keyword:`!return` statement, not the value from the :keyword:`!try` "
"clause's :keyword:`!return` statement."
msgstr ""
"Bir :keyword:`!finally` yan tümcesi bir :keyword:`!return` ifadesini "
"içeriyorsa, döndürülen değer, :keyword:`!finally` yan tümcesinin :keyword:`!"
"return` ifadesindeki değer olacaktır, :keyword:`!try` yan tümcesinin :"
"keyword:`!return` ifadesindeki değer değil."

#: tutorial/errors.rst:411
msgid "For example::"
msgstr "Mesela::"

#: tutorial/errors.rst:422
msgid "A more complicated example::"
msgstr "Daha karmaşık bir örnek::"

#: tutorial/errors.rst:447
msgid ""
"As you can see, the :keyword:`finally` clause is executed in any event.  "
"The :exc:`TypeError` raised by dividing two strings is not handled by the :"
"keyword:`except` clause and therefore re-raised after the :keyword:`!"
"finally` clause has been executed."
msgstr ""
"Gördüğünüz gibi, :keyword:`finally` yan tümcesi her durumda yürütülür.  İki "
"dizeyi bölerek oluşturulan :exc:`TypeError`, :keyword:`except` yan tümcesi "
"tarafından işlenmez ve bu nedenle :keyword:`!finally` yan tümcesi "
"yürütüldikten sonra yeniden yükseltilir."

#: tutorial/errors.rst:452
msgid ""
"In real world applications, the :keyword:`finally` clause is useful for "
"releasing external resources (such as files or network connections), "
"regardless of whether the use of the resource was successful."
msgstr ""
"Gerçek dünyadaki uygulamalarda :keyword:`finally` yan tümcesi, kaynağın "
"kullanımının başarılı olup olmadığına bakılmaksızın dış kaynakları (dosyalar "
"veya ağ bağlantıları gibi) serbest bırakmak için yararlıdır."

#: tutorial/errors.rst:460
msgid "Predefined Clean-up Actions"
msgstr "Önceden Tanımlanmış Temizleme Eylemleri"

#: tutorial/errors.rst:462
msgid ""
"Some objects define standard clean-up actions to be undertaken when the "
"object is no longer needed, regardless of whether or not the operation using "
"the object succeeded or failed. Look at the following example, which tries "
"to open a file and print its contents to the screen. ::"
msgstr ""
"Bazı nesneler, nesneyi kullanan işlemin başarılı veya başarısız olup "
"olmadığına bakılmaksızın, nesne artık gerekli olmadığında gerçekleştirilecek "
"standart temizleme eylemlerini tanımlar. Bir dosyayı açmaya ve içeriğini "
"ekrana yazdırmaya çalışan aşağıdaki örneğe bakın. ::"

#: tutorial/errors.rst:470
msgid ""
"The problem with this code is that it leaves the file open for an "
"indeterminate amount of time after this part of the code has finished "
"executing. This is not an issue in simple scripts, but can be a problem for "
"larger applications. The :keyword:`with` statement allows objects like files "
"to be used in a way that ensures they are always cleaned up promptly and "
"correctly. ::"
msgstr ""
"Bu kodla ilgili sorun, kodun bu bölümünün yürütülmesi tamamlandıktan sonra "
"dosyayı belirsiz bir süre açık bırakmasıdır. Bu basit komut dosyalarında bir "
"sorun değildir, ancak daha büyük uygulamalar için bir sorun olabilir. :"
"keyword:`with` ifadesi, dosyalar gibi nesnelerin her zaman hızlı ve doğru "
"temizlenmesini sağlayacak şekilde kullanılmasına izin verir. ::"

#: tutorial/errors.rst:480
msgid ""
"After the statement is executed, the file *f* is always closed, even if a "
"problem was encountered while processing the lines. Objects which, like "
"files, provide predefined clean-up actions will indicate this in their "
"documentation."
msgstr ""
"İfade çalıştırıldıktan sonra, satırlar işlenirken bir sorunla karşılaşılsa "
"bile *f* dosyası her zaman kapatılır. Dosyalar gibi önceden tanımlanmış "
"temizleme eylemleri sağlayan nesneler dokümantasyonlarında bunu gösterir."

#~ msgid ""
#~ "The :keyword:`raise` statement allows an optional :keyword:`from<raise>` "
#~ "which enables chaining exceptions. For example::"
#~ msgstr ""
#~ ":keyword:`raise` ifadesi, zincirleme istisnalar sağlayan opsiyonel bir :"
#~ "keyword:`from<raise>`e izin verir. Örneğin::"

#~ msgid ""
#~ "Exception chaining happens automatically when an exception is raised "
#~ "inside an :keyword:`except` or :keyword:`finally` section. This can be "
#~ "disabled by using ``from None`` idiom:"
#~ msgstr ""
#~ "İstisna zincirlemesi, bir :keyword:`except` veya :keyword:`finally` "
#~ "bölümünde bir istisna açıldığında otomatik olarak gerçekleşir. Bu, ``from "
#~ "None`` deyimi kullanılarak devre dışı bırakılabilir:"

# Python Documentation Turkish Translation
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-01 00:16+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: \n"
"Language-Team: TURKISH <python.docs.tr@gmail.com>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: library/pathlib.rst:3
msgid ":mod:`pathlib` --- Object-oriented filesystem paths"
msgstr ""

#: library/pathlib.rst:10
msgid "**Source code:** :source:`Lib/pathlib.py`"
msgstr ""

#: library/pathlib.rst:16
msgid ""
"This module offers classes representing filesystem paths with semantics "
"appropriate for different operating systems.  Path classes are divided "
"between :ref:`pure paths <pure-paths>`, which provide purely computational "
"operations without I/O, and :ref:`concrete paths <concrete-paths>`, which "
"inherit from pure paths but also provide I/O operations."
msgstr ""

#: library/pathlib.rst:26
msgid ""
"If you've never used this module before or just aren't sure which class is "
"right for your task, :class:`Path` is most likely what you need. It "
"instantiates a :ref:`concrete path <concrete-paths>` for the platform the "
"code is running on."
msgstr ""

#: library/pathlib.rst:30
msgid "Pure paths are useful in some special cases; for example:"
msgstr ""

#: library/pathlib.rst:32
msgid ""
"If you want to manipulate Windows paths on a Unix machine (or vice versa). "
"You cannot instantiate a :class:`WindowsPath` when running on Unix, but you "
"can instantiate :class:`PureWindowsPath`."
msgstr ""

#: library/pathlib.rst:35
msgid ""
"You want to make sure that your code only manipulates paths without actually "
"accessing the OS. In this case, instantiating one of the pure classes may be "
"useful since those simply don't have any OS-accessing operations."
msgstr ""

#: library/pathlib.rst:40
msgid ":pep:`428`: The pathlib module -- object-oriented filesystem paths."
msgstr ""

#: library/pathlib.rst:43
msgid ""
"For low-level path manipulation on strings, you can also use the :mod:`os."
"path` module."
msgstr ""

#: library/pathlib.rst:48
msgid "Basic use"
msgstr ""

#: library/pathlib.rst:50
msgid "Importing the main class::"
msgstr ""

#: library/pathlib.rst:54
msgid "Listing subdirectories::"
msgstr ""

#: library/pathlib.rst:61
msgid "Listing Python source files in this directory tree::"
msgstr ""

#: library/pathlib.rst:68
msgid "Navigating inside a directory tree::"
msgstr ""

#: library/pathlib.rst:77
msgid "Querying path properties::"
msgstr ""

#: library/pathlib.rst:84
msgid "Opening a file::"
msgstr ""

#: library/pathlib.rst:94
msgid "Pure paths"
msgstr ""

#: library/pathlib.rst:96
msgid ""
"Pure path objects provide path-handling operations which don't actually "
"access a filesystem.  There are three ways to access these classes, which we "
"also call *flavours*:"
msgstr ""

#: library/pathlib.rst:102
msgid ""
"A generic class that represents the system's path flavour (instantiating it "
"creates either a :class:`PurePosixPath` or a :class:`PureWindowsPath`)::"
msgstr ""

#: library/pathlib.rst:108
msgid ""
"Each element of *pathsegments* can be either a string representing a path "
"segment, or an object implementing the :class:`os.PathLike` interface where "
"the :meth:`~os.PathLike.__fspath__` method returns a string, such as another "
"path object::"
msgstr ""

#: library/pathlib.rst:118
msgid "When *pathsegments* is empty, the current directory is assumed::"
msgstr ""

#: library/pathlib.rst:123
msgid ""
"If a segment is an absolute path, all previous segments are ignored (like :"
"func:`os.path.join`)::"
msgstr ""

#: library/pathlib.rst:131
msgid ""
"On Windows, the drive is not reset when a rooted relative path segment (e."
"g., ``r'\\foo'``) is encountered::"
msgstr ""

#: library/pathlib.rst:137
msgid ""
"Spurious slashes and single dots are collapsed, but double dots (``'..'``) "
"and leading double slashes (``'//'``) are not, since this would change the "
"meaning of a path for various reasons (e.g. symbolic links, UNC paths)::"
msgstr ""

#: library/pathlib.rst:150
msgid ""
"(a na√Øve approach would make ``PurePosixPath('foo/../bar')`` equivalent to "
"``PurePosixPath('bar')``, which is wrong if ``foo`` is a symbolic link to "
"another directory)"
msgstr ""

#: library/pathlib.rst:154
msgid ""
"Pure path objects implement the :class:`os.PathLike` interface, allowing "
"them to be used anywhere the interface is accepted."
msgstr ""

#: library/pathlib.rst:157
msgid "Added support for the :class:`os.PathLike` interface."
msgstr ""

#: library/pathlib.rst:162
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents non-Windows "
"filesystem paths::"
msgstr ""

#: library/pathlib.rst:180 library/pathlib.rst:752 library/pathlib.rst:762
msgid "*pathsegments* is specified similarly to :class:`PurePath`."
msgstr ""

#: library/pathlib.rst:172
msgid ""
"A subclass of :class:`PurePath`, this path flavour represents Windows "
"filesystem paths, including `UNC paths`_::"
msgstr ""

#: library/pathlib.rst:184
msgid ""
"Regardless of the system you're running on, you can instantiate all of these "
"classes, since they don't provide any operation that does system calls."
msgstr ""

#: library/pathlib.rst:189
msgid "General properties"
msgstr ""

#: library/pathlib.rst:191
msgid ""
"Paths are immutable and :term:`hashable`.  Paths of a same flavour are "
"comparable and orderable.  These properties respect the flavour's case-"
"folding semantics::"
msgstr ""

#: library/pathlib.rst:204
msgid "Paths of a different flavour compare unequal and cannot be ordered::"
msgstr ""

#: library/pathlib.rst:215
msgid "Operators"
msgstr ""

#: library/pathlib.rst:217
msgid ""
"The slash operator helps create child paths, like :func:`os.path.join`. If "
"the argument is an absolute path, the previous path is ignored. On Windows, "
"the drive is not reset when the argument is a rooted relative path (e.g., "
"``r'\\foo'``)::"
msgstr ""

#: library/pathlib.rst:235
msgid ""
"A path object can be used anywhere an object implementing :class:`os."
"PathLike` is accepted::"
msgstr ""

#: library/pathlib.rst:243
msgid ""
"The string representation of a path is the raw filesystem path itself (in "
"native form, e.g. with backslashes under Windows), which you can pass to any "
"function taking a file path as a string::"
msgstr ""

#: library/pathlib.rst:254
msgid ""
"Similarly, calling :class:`bytes` on a path gives the raw filesystem path as "
"a bytes object, as encoded by :func:`os.fsencode`::"
msgstr ""

#: library/pathlib.rst:261
msgid ""
"Calling :class:`bytes` is only recommended under Unix.  Under Windows, the "
"unicode form is the canonical representation of filesystem paths."
msgstr ""

#: library/pathlib.rst:266
msgid "Accessing individual parts"
msgstr ""

#: library/pathlib.rst:268
msgid ""
"To access the individual \"parts\" (components) of a path, use the following "
"property:"
msgstr ""

#: library/pathlib.rst:273
msgid "A tuple giving access to the path's various components::"
msgstr ""

#: library/pathlib.rst:283
msgid "(note how the drive and local root are regrouped in a single part)"
msgstr ""

#: library/pathlib.rst:287
msgid "Methods and properties"
msgstr ""

#: library/pathlib.rst:293
msgid "Pure paths provide the following methods and properties:"
msgstr ""

#: library/pathlib.rst:297
msgid "A string representing the drive letter or name, if any::"
msgstr ""

#: library/pathlib.rst:306
msgid "UNC shares are also considered drives::"
msgstr ""

#: library/pathlib.rst:313
msgid "A string representing the (local or global) root, if any::"
msgstr ""

#: library/pathlib.rst:322
msgid "UNC shares always have a root::"
msgstr ""

#: library/pathlib.rst:327
msgid ""
"If the path starts with more than two successive slashes, :class:`~pathlib."
"PurePosixPath` collapses them::"
msgstr ""

#: library/pathlib.rst:339
msgid ""
"This behavior conforms to *The Open Group Base Specifications Issue 6*, "
"paragraph `4.11 Pathname Resolution <https://pubs.opengroup.org/"
"onlinepubs/009695399/basedefs/xbd_chap04.html#tag_04_11>`_:"
msgstr ""

#: library/pathlib.rst:343
msgid ""
"*\"A pathname that begins with two successive slashes may be interpreted in "
"an implementation-defined manner, although more than two leading slashes "
"shall be treated as a single slash.\"*"
msgstr ""

#: library/pathlib.rst:349
msgid "The concatenation of the drive and root::"
msgstr ""

#: library/pathlib.rst:363
msgid ""
"An immutable sequence providing access to the logical ancestors of the path::"
msgstr ""

#: library/pathlib.rst:374
msgid ""
"The parents sequence now supports :term:`slices <slice>` and negative index "
"values."
msgstr ""

#: library/pathlib.rst:379
msgid "The logical parent of the path::"
msgstr ""

#: library/pathlib.rst:385
msgid "You cannot go past an anchor, or empty path::"
msgstr ""

#: library/pathlib.rst:395
msgid "This is a purely lexical operation, hence the following behaviour::"
msgstr ""

#: library/pathlib.rst:401
msgid ""
"If you want to walk an arbitrary filesystem path upwards, it is recommended "
"to first call :meth:`Path.resolve` so as to resolve symlinks and eliminate "
"``\"..\"`` components."
msgstr ""

#: library/pathlib.rst:408
msgid ""
"A string representing the final path component, excluding the drive and "
"root, if any::"
msgstr ""

#: library/pathlib.rst:414
msgid "UNC drive names are not considered::"
msgstr ""

#: library/pathlib.rst:424
msgid "The file extension of the final component, if any::"
msgstr ""

#: library/pathlib.rst:436
msgid "A list of the path's file extensions::"
msgstr ""

#: library/pathlib.rst:448
msgid "The final path component, without its suffix::"
msgstr ""

#: library/pathlib.rst:460
msgid ""
"Return a string representation of the path with forward slashes (``/``)::"
msgstr ""

#: library/pathlib.rst:471
msgid ""
"Represent the path as a ``file`` URI.  :exc:`ValueError` is raised if the "
"path isn't absolute."
msgstr ""

#: library/pathlib.rst:484
msgid ""
"Return whether the path is absolute or not.  A path is considered absolute "
"if it has both a root and (if the flavour allows) a drive::"
msgstr ""

#: library/pathlib.rst:504
msgid "Return whether or not this path is relative to the *other* path."
msgstr ""

#: library/pathlib.rst:516
msgid ""
"Passing additional arguments is deprecated; if supplied, they are joined "
"with *other*."
msgstr ""

#: library/pathlib.rst:521
msgid ""
"With :class:`PureWindowsPath`, return ``True`` if the path is considered "
"reserved under Windows, ``False`` otherwise.  With :class:`PurePosixPath`, "
"``False`` is always returned."
msgstr ""

#: library/pathlib.rst:530
msgid ""
"File system calls on reserved paths can fail mysteriously or have unintended "
"effects."
msgstr ""

#: library/pathlib.rst:536
msgid ""
"Calling this method is equivalent to combining the path with each of the "
"given *pathsegments* in turn::"
msgstr ""

#: library/pathlib.rst:551
msgid ""
"Match this path against the provided glob-style pattern.  Return ``True`` if "
"matching is successful, ``False`` otherwise."
msgstr ""

#: library/pathlib.rst:554
msgid ""
"If *pattern* is relative, the path can be either relative or absolute, and "
"matching is done from the right::"
msgstr ""

#: library/pathlib.rst:564
msgid ""
"If *pattern* is absolute, the path must be absolute, and the whole path must "
"match::"
msgstr ""

#: library/pathlib.rst:572
msgid ""
"The *pattern* may be another path object; this speeds up matching the same "
"pattern against multiple files::"
msgstr ""

#: library/pathlib.rst:579
msgid "Accepts an object implementing the :class:`os.PathLike` interface."
msgstr ""

#: library/pathlib.rst:582
msgid "As with other methods, case-sensitivity follows platform defaults::"
msgstr ""

#: library/pathlib.rst:589
msgid ""
"Set *case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""

#: library/pathlib.rst:934 library/pathlib.rst:1347
msgid "The *case_sensitive* parameter was added."
msgstr ""

#: library/pathlib.rst:597
msgid ""
"Compute a version of this path relative to the path represented by *other*.  "
"If it's impossible, :exc:`ValueError` is raised::"
msgstr ""

#: library/pathlib.rst:612
msgid ""
"When *walk_up* is False (the default), the path must start with *other*. "
"When the argument is True, ``..`` entries may be added to form the relative "
"path. In all other cases, such as the paths referencing different drives, :"
"exc:`ValueError` is raised.::"
msgstr ""

#: library/pathlib.rst:627
msgid ""
"This function is part of :class:`PurePath` and works with strings. It does "
"not check or access the underlying file structure. This can impact the "
"*walk_up* option as it assumes that no symlinks are present in the path; "
"call :meth:`~Path.resolve` first if necessary to resolve symlinks."
msgstr ""

#: library/pathlib.rst:633
msgid ""
"The *walk_up* parameter was added (old behavior is the same as "
"``walk_up=False``)."
msgstr ""

#: library/pathlib.rst:638
msgid ""
"Passing additional positional arguments is deprecated; if supplied, they are "
"joined with *other*."
msgstr ""

#: library/pathlib.rst:643
msgid ""
"Return a new path with the :attr:`name` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""

#: library/pathlib.rst:660
msgid ""
"Return a new path with the :attr:`stem` changed.  If the original path "
"doesn't have a name, ValueError is raised::"
msgstr ""

#: library/pathlib.rst:684
msgid ""
"Return a new path with the :attr:`suffix` changed.  If the original path "
"doesn't have a suffix, the new *suffix* is appended instead.  If the "
"*suffix* is an empty string, the original suffix is removed::"
msgstr ""

#: library/pathlib.rst:701
msgid ""
"Create a new path object of the same type by combining the given "
"*pathsegments*. This method is called whenever a derivative path is created, "
"such as from :attr:`parent` and :meth:`relative_to`. Subclasses may override "
"this method to pass information to derivative paths, for example::"
msgstr ""

#: library/pathlib.rst:727
msgid "Concrete paths"
msgstr ""

#: library/pathlib.rst:729
msgid ""
"Concrete paths are subclasses of the pure path classes.  In addition to "
"operations provided by the latter, they also provide methods to do system "
"calls on path objects.  There are three ways to instantiate concrete paths:"
msgstr ""

#: library/pathlib.rst:735
msgid ""
"A subclass of :class:`PurePath`, this class represents concrete paths of the "
"system's path flavour (instantiating it creates either a :class:`PosixPath` "
"or a :class:`WindowsPath`)::"
msgstr ""

#: library/pathlib.rst:746
msgid ""
"A subclass of :class:`Path` and :class:`PurePosixPath`, this class "
"represents concrete non-Windows filesystem paths::"
msgstr ""

#: library/pathlib.rst:756
msgid ""
"A subclass of :class:`Path` and :class:`PureWindowsPath`, this class "
"represents concrete Windows filesystem paths::"
msgstr ""

#: library/pathlib.rst:764
msgid ""
"You can only instantiate the class flavour that corresponds to your system "
"(allowing system calls on non-compatible path flavours could lead to bugs or "
"failures in your application)::"
msgstr ""

#: library/pathlib.rst:784
msgid "Methods"
msgstr ""

#: library/pathlib.rst:786
msgid ""
"Concrete paths provide the following methods in addition to pure paths "
"methods.  Many of these methods can raise an :exc:`OSError` if a system call "
"fails (for example because the path doesn't exist)."
msgstr ""

#: library/pathlib.rst:792
msgid ""
":meth:`~Path.exists()`, :meth:`~Path.is_dir()`, :meth:`~Path.is_file()`, :"
"meth:`~Path.is_mount()`, :meth:`~Path.is_symlink()`, :meth:`~Path."
"is_block_device()`, :meth:`~Path.is_char_device()`, :meth:`~Path."
"is_fifo()`, :meth:`~Path.is_socket()` now return ``False`` instead of "
"raising an exception for paths that contain characters unrepresentable at "
"the OS level."
msgstr ""

#: library/pathlib.rst:802
msgid ""
"Return a new path object representing the current directory (as returned by :"
"func:`os.getcwd`)::"
msgstr ""

#: library/pathlib.rst:811
msgid ""
"Return a new path object representing the user's home directory (as returned "
"by :func:`os.path.expanduser` with ``~`` construct). If the home directory "
"can't be resolved, :exc:`RuntimeError` is raised."
msgstr ""

#: library/pathlib.rst:825
msgid ""
"Return a :class:`os.stat_result` object containing information about this "
"path, like :func:`os.stat`. The result is looked up at each call to this "
"method."
msgstr ""

#: library/pathlib.rst:828
msgid ""
"This method normally follows symlinks; to stat a symlink add the argument "
"``follow_symlinks=False``, or use :meth:`~Path.lstat`."
msgstr ""

#: library/pathlib.rst:859 library/pathlib.rst:880
msgid "The *follow_symlinks* parameter was added."
msgstr ""

#: library/pathlib.rst:844
msgid "Change the file mode and permissions, like :func:`os.chmod`."
msgstr ""

#: library/pathlib.rst:846
msgid ""
"This method normally follows symlinks. Some Unix flavours support changing "
"permissions on the symlink itself; on these platforms you may add the "
"argument ``follow_symlinks=False``, or use :meth:`~Path.lchmod`."
msgstr ""

#: library/pathlib.rst:864
msgid "Return ``True`` if the path points to an existing file or directory."
msgstr ""

#: library/pathlib.rst:866
msgid ""
"This method normally follows symlinks; to check if a symlink exists, add the "
"argument ``follow_symlinks=False``."
msgstr ""

#: library/pathlib.rst:885
msgid ""
"Return a new path with expanded ``~`` and ``~user`` constructs, as returned "
"by :meth:`os.path.expanduser`. If a home directory can't be resolved, :exc:"
"`RuntimeError` is raised."
msgstr ""

#: library/pathlib.rst:900
msgid ""
"Glob the given relative *pattern* in the directory represented by this path, "
"yielding all matching files (of any kind)::"
msgstr ""

#: library/pathlib.rst:908
msgid ""
"Patterns are the same as for :mod:`fnmatch`, with the addition of \"``**``\" "
"which means \"this directory and all subdirectories, recursively\".  In "
"other words, it enables recursive globbing::"
msgstr ""

#: library/pathlib.rst:1336
msgid ""
"By default, or when the *case_sensitive* keyword-only argument is set to "
"``None``, this method matches paths using platform-specific casing rules: "
"typically, case-sensitive on POSIX, and case-insensitive on Windows. Set "
"*case_sensitive* to ``True`` or ``False`` to override this behaviour."
msgstr ""

#: library/pathlib.rst:925
msgid ""
"Using the \"``**``\" pattern in large directory trees may consume an "
"inordinate amount of time."
msgstr ""

#: library/pathlib.rst:928
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.glob`` with "
"arguments ``self``, ``pattern``."
msgstr ""

#: library/pathlib.rst:1343
msgid ""
"Return only directories if *pattern* ends with a pathname components "
"separator (:data:`~os.sep` or :data:`~os.altsep`)."
msgstr ""

#: library/pathlib.rst:940
msgid ""
"Return the name of the group owning the file.  :exc:`KeyError` is raised if "
"the file's gid isn't found in the system database."
msgstr ""

#: library/pathlib.rst:946
msgid ""
"Return ``True`` if the path points to a directory (or a symbolic link "
"pointing to a directory), ``False`` if it points to another kind of file."
msgstr ""

#: library/pathlib.rst:958 library/pathlib.rst:1009 library/pathlib.rst:1027
msgid ""
"``False`` is also returned if the path doesn't exist or is a broken symlink; "
"other errors (such as permission errors) are propagated."
msgstr ""

#: library/pathlib.rst:955
msgid ""
"Return ``True`` if the path points to a regular file (or a symbolic link "
"pointing to a regular file), ``False`` if it points to another kind of file."
msgstr ""

#: library/pathlib.rst:964
msgid ""
"Return ``True`` if the path points to a junction, and ``False`` for any "
"other type of file. Currently only Windows supports junctions."
msgstr ""

#: library/pathlib.rst:972
msgid ""
"Return ``True`` if the path is a :dfn:`mount point`: a point in a file "
"system where a different file system has been mounted.  On POSIX, the "
"function checks whether *path*'s parent, :file:`path/..`, is on a different "
"device than *path*, or whether :file:`path/..` and *path* point to the same "
"i-node on the same device --- this should detect mount points for all Unix "
"and POSIX variants.  On Windows, a mount point is considered to be a drive "
"letter root (e.g. ``c:\\``), a UNC share (e.g. ``\\\\server\\share``), or a "
"mounted filesystem directory."
msgstr ""

#: library/pathlib.rst:983
msgid "Windows support was added."
msgstr ""

#: library/pathlib.rst:989
msgid ""
"Return ``True`` if the path points to a symbolic link, ``False`` otherwise."
msgstr ""

#: library/pathlib.rst:991
msgid ""
"``False`` is also returned if the path doesn't exist; other errors (such as "
"permission errors) are propagated."
msgstr ""

#: library/pathlib.rst:997
msgid ""
"Return ``True`` if the path points to a Unix socket (or a symbolic link "
"pointing to a Unix socket), ``False`` if it points to another kind of file."
msgstr ""

#: library/pathlib.rst:1006
msgid ""
"Return ``True`` if the path points to a FIFO (or a symbolic link pointing to "
"a FIFO), ``False`` if it points to another kind of file."
msgstr ""

#: library/pathlib.rst:1015
msgid ""
"Return ``True`` if the path points to a block device (or a symbolic link "
"pointing to a block device), ``False`` if it points to another kind of file."
msgstr ""

#: library/pathlib.rst:1024
msgid ""
"Return ``True`` if the path points to a character device (or a symbolic link "
"pointing to a character device), ``False`` if it points to another kind of "
"file."
msgstr ""

#: library/pathlib.rst:1033
msgid ""
"When the path points to a directory, yield path objects of the directory "
"contents::"
msgstr ""

#: library/pathlib.rst:1047
msgid ""
"The children are yielded in arbitrary order, and the special entries ``'.'`` "
"and ``'..'`` are not included.  If a file is removed from or added to the "
"directory after creating the iterator, whether a path object for that file "
"be included is unspecified."
msgstr ""

#: library/pathlib.rst:1054
msgid ""
"Generate the file names in a directory tree by walking the tree either top-"
"down or bottom-up."
msgstr ""

#: library/pathlib.rst:1057
msgid ""
"For each directory in the directory tree rooted at *self* (including *self* "
"but excluding '.' and '..'), the method yields a 3-tuple of ``(dirpath, "
"dirnames, filenames)``."
msgstr ""

#: library/pathlib.rst:1061
msgid ""
"*dirpath* is a :class:`Path` to the directory currently being walked, "
"*dirnames* is a list of strings for the names of subdirectories in *dirpath* "
"(excluding ``'.'`` and ``'..'``), and *filenames* is a list of strings for "
"the names of the non-directory files in *dirpath*. To get a full path (which "
"begins with *self*) to a file or directory in *dirpath*, do ``dirpath / "
"name``. Whether or not the lists are sorted is file system-dependent."
msgstr ""

#: library/pathlib.rst:1069
msgid ""
"If the optional argument *top_down* is true (which is the default), the "
"triple for a directory is generated before the triples for any of its "
"subdirectories (directories are walked top-down).  If *top_down* is false, "
"the triple for a directory is generated after the triples for all of its "
"subdirectories (directories are walked bottom-up). No matter the value of "
"*top_down*, the list of subdirectories is retrieved before the triples for "
"the directory and its subdirectories are walked."
msgstr ""

#: library/pathlib.rst:1077
msgid ""
"When *top_down* is true, the caller can modify the *dirnames* list in-place "
"(for example, using :keyword:`del` or slice assignment), and :meth:`Path."
"walk` will only recurse into the subdirectories whose names remain in "
"*dirnames*. This can be used to prune the search, or to impose a specific "
"order of visiting, or even to inform :meth:`Path.walk` about directories the "
"caller creates or renames before it resumes :meth:`Path.walk` again. "
"Modifying *dirnames* when *top_down* is false has no effect on the behavior "
"of :meth:`Path.walk()` since the directories in *dirnames* have already been "
"generated by the time *dirnames* is yielded to the caller."
msgstr ""

#: library/pathlib.rst:1087
msgid ""
"By default, errors from :func:`os.scandir` are ignored.  If the optional "
"argument *on_error* is specified, it should be a callable; it will be called "
"with one argument, an :exc:`OSError` instance. The callable can handle the "
"error to continue the walk or re-raise it to stop the walk. Note that the "
"filename is available as the ``filename`` attribute of the exception object."
msgstr ""

#: library/pathlib.rst:1093
msgid ""
"By default, :meth:`Path.walk` does not follow symbolic links, and instead "
"adds them to the *filenames* list. Set *follow_symlinks* to true to resolve "
"symlinks and place them in *dirnames* and *filenames* as appropriate for "
"their targets, and consequently visit directories pointed to by symlinks "
"(where supported)."
msgstr ""

#: library/pathlib.rst:1100
msgid ""
"Be aware that setting *follow_symlinks* to true can lead to infinite "
"recursion if a link points to a parent directory of itself. :meth:`Path."
"walk` does not keep track of the directories it has already visited."
msgstr ""

#: library/pathlib.rst:1105
msgid ""
":meth:`Path.walk` assumes the directories it walks are not modified during "
"execution. For example, if a directory from *dirnames* has been replaced "
"with a symlink and *follow_symlinks* is false, :meth:`Path.walk` will still "
"try to descend into it. To prevent such behavior, remove directories from "
"*dirnames* as appropriate."
msgstr ""

#: library/pathlib.rst:1113
msgid ""
"Unlike :func:`os.walk`, :meth:`Path.walk` lists symlinks to directories in "
"*filenames* if *follow_symlinks* is false."
msgstr ""

#: library/pathlib.rst:1116
msgid ""
"This example displays the number of bytes used by all files in each "
"directory, while ignoring ``__pycache__`` directories::"
msgstr ""

#: library/pathlib.rst:1132
msgid ""
"This next example is a simple implementation of :func:`shutil.rmtree`. "
"Walking the tree bottom-up is essential as :func:`rmdir` doesn't allow "
"deleting a directory before it is empty::"
msgstr ""

#: library/pathlib.rst:1149
msgid ""
"Like :meth:`Path.chmod` but, if the path points to a symbolic link, the "
"symbolic link's mode is changed rather than its target's."
msgstr ""

#: library/pathlib.rst:1155
msgid ""
"Like :meth:`Path.stat` but, if the path points to a symbolic link, return "
"the symbolic link's information rather than its target's."
msgstr ""

#: library/pathlib.rst:1161
msgid ""
"Create a new directory at this given path.  If *mode* is given, it is "
"combined with the process' ``umask`` value to determine the file mode and "
"access flags.  If the path already exists, :exc:`FileExistsError` is raised."
msgstr ""

#: library/pathlib.rst:1166
msgid ""
"If *parents* is true, any missing parents of this path are created as "
"needed; they are created with the default permissions without taking *mode* "
"into account (mimicking the POSIX ``mkdir -p`` command)."
msgstr ""

#: library/pathlib.rst:1170
msgid ""
"If *parents* is false (the default), a missing parent raises :exc:"
"`FileNotFoundError`."
msgstr ""

#: library/pathlib.rst:1173
msgid ""
"If *exist_ok* is false (the default), :exc:`FileExistsError` is raised if "
"the target directory already exists."
msgstr ""

#: library/pathlib.rst:1176
msgid ""
"If *exist_ok* is true, :exc:`FileExistsError` exceptions will be ignored "
"(same behavior as the POSIX ``mkdir -p`` command), but only if the last path "
"component is not an existing non-directory file."
msgstr ""

#: library/pathlib.rst:1180
msgid "The *exist_ok* parameter was added."
msgstr ""

#: library/pathlib.rst:1186
msgid ""
"Open the file pointed to by the path, like the built-in :func:`open` "
"function does::"
msgstr ""

#: library/pathlib.rst:1198
msgid ""
"Return the name of the user owning the file.  :exc:`KeyError` is raised if "
"the file's uid isn't found in the system database."
msgstr ""

#: library/pathlib.rst:1204
msgid "Return the binary contents of the pointed-to file as a bytes object::"
msgstr ""

#: library/pathlib.rst:1217
msgid "Return the decoded contents of the pointed-to file as a string::"
msgstr ""

#: library/pathlib.rst:1225
msgid ""
"The file is opened and then closed. The optional parameters have the same "
"meaning as in :func:`open`."
msgstr ""

#: library/pathlib.rst:1233
msgid ""
"Return the path to which the symbolic link points (as returned by :func:`os."
"readlink`)::"
msgstr ""

#: library/pathlib.rst:1246
msgid ""
"Rename this file or directory to the given *target*, and return a new Path "
"instance pointing to *target*.  On Unix, if *target* exists and is a file, "
"it will be replaced silently if the user has permission. On Windows, if "
"*target* exists, :exc:`FileExistsError` will be raised. *target* can be "
"either a string or another path object::"
msgstr ""

#: library/pathlib.rst:1277
msgid ""
"The target path may be absolute or relative. Relative paths are interpreted "
"relative to the current working directory, *not* the directory of the Path "
"object."
msgstr ""

#: library/pathlib.rst:1265
msgid ""
"It is implemented in terms of :func:`os.rename` and gives the same "
"guarantees."
msgstr ""

#: library/pathlib.rst:1281
msgid "Added return value, return the new Path instance."
msgstr ""

#: library/pathlib.rst:1273
msgid ""
"Rename this file or directory to the given *target*, and return a new Path "
"instance pointing to *target*.  If *target* points to an existing file or "
"empty directory, it will be unconditionally replaced."
msgstr ""

#: library/pathlib.rst:1287
msgid ""
"Make the path absolute, without normalization or resolving symlinks. Returns "
"a new path object::"
msgstr ""

#: library/pathlib.rst:1299
msgid ""
"Make the path absolute, resolving any symlinks.  A new path object is "
"returned::"
msgstr ""

#: library/pathlib.rst:1308
msgid ""
"\"``..``\" components are also eliminated (this is the only method to do "
"so)::"
msgstr ""

#: library/pathlib.rst:1314
msgid ""
"If the path doesn't exist and *strict* is ``True``, :exc:`FileNotFoundError` "
"is raised.  If *strict* is ``False``, the path is resolved as far as "
"possible and any remainder is appended without checking whether it exists.  "
"If an infinite loop is encountered along the resolution path, :exc:"
"`RuntimeError` is raised."
msgstr ""

#: library/pathlib.rst:1320
msgid "The *strict* parameter was added (pre-3.6 behavior is strict)."
msgstr ""

#: library/pathlib.rst:1325
msgid ""
"Glob the given relative *pattern* recursively.  This is like calling :func:"
"`Path.glob` with \"``**/``\" added in front of the *pattern*, where "
"*patterns* are the same as for :mod:`fnmatch`::"
msgstr ""

#: library/pathlib.rst:1341
msgid ""
"Raises an :ref:`auditing event <auditing>` ``pathlib.Path.rglob`` with "
"arguments ``self``, ``pattern``."
msgstr ""

#: library/pathlib.rst:1353
msgid "Remove this directory.  The directory must be empty."
msgstr ""

#: library/pathlib.rst:1358
msgid ""
"Return whether this path points to the same file as *other_path*, which can "
"be either a Path object, or a string.  The semantics are similar to :func:"
"`os.path.samefile` and :func:`os.path.samestat`."
msgstr ""

#: library/pathlib.rst:1362
msgid ""
"An :exc:`OSError` can be raised if either file cannot be accessed for some "
"reason."
msgstr ""

#: library/pathlib.rst:1379
msgid ""
"Make this path a symbolic link to *target*.  Under Windows, "
"*target_is_directory* must be true (default ``False``) if the link's target "
"is a directory.  Under POSIX, *target_is_directory*'s value is ignored."
msgstr ""

#: library/pathlib.rst:1395
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.symlink`'s."
msgstr ""

#: library/pathlib.rst:1400
msgid "Make this path a hard link to the same file as *target*."
msgstr ""

#: library/pathlib.rst:1403
msgid ""
"The order of arguments (link, target) is the reverse of :func:`os.link`'s."
msgstr ""

#: library/pathlib.rst:1411
msgid ""
"Create a file at this given path.  If *mode* is given, it is combined with "
"the process' ``umask`` value to determine the file mode and access flags.  "
"If the file already exists, the function succeeds if *exist_ok* is true (and "
"its modification time is updated to the current time), otherwise :exc:"
"`FileExistsError` is raised."
msgstr ""

#: library/pathlib.rst:1420
msgid ""
"Remove this file or symbolic link.  If the path points to a directory, use :"
"func:`Path.rmdir` instead."
msgstr ""

#: library/pathlib.rst:1423
msgid ""
"If *missing_ok* is false (the default), :exc:`FileNotFoundError` is raised "
"if the path does not exist."
msgstr ""

#: library/pathlib.rst:1426
msgid ""
"If *missing_ok* is true, :exc:`FileNotFoundError` exceptions will be ignored "
"(same behavior as the POSIX ``rm -f`` command)."
msgstr ""

#: library/pathlib.rst:1429
msgid "The *missing_ok* parameter was added."
msgstr ""

#: library/pathlib.rst:1435
msgid ""
"Open the file pointed to in bytes mode, write *data* to it, and close the "
"file::"
msgstr ""

#: library/pathlib.rst:1444
msgid "An existing file of the same name is overwritten."
msgstr ""

#: library/pathlib.rst:1451
msgid ""
"Open the file pointed to in text mode, write *data* to it, and close the "
"file::"
msgstr ""

#: library/pathlib.rst:1460
msgid ""
"An existing file of the same name is overwritten. The optional parameters "
"have the same meaning as in :func:`open`."
msgstr ""

#: library/pathlib.rst:1465
msgid "The *newline* parameter was added."
msgstr ""

#: library/pathlib.rst:1469
msgid "Correspondence to tools in the :mod:`os` module"
msgstr ""

#: library/pathlib.rst:1471
msgid ""
"Below is a table mapping various :mod:`os` functions to their corresponding :"
"class:`PurePath`/:class:`Path` equivalent."
msgstr ""

#: library/pathlib.rst:1476
msgid ""
"Not all pairs of functions/methods below are equivalent. Some of them, "
"despite having some overlapping use-cases, have different semantics. They "
"include :func:`os.path.abspath` and :meth:`Path.absolute`, :func:`os.path."
"relpath` and :meth:`PurePath.relative_to`."
msgstr ""

#: library/pathlib.rst:1482
msgid ":mod:`os` and :mod:`os.path`"
msgstr ""

#: library/pathlib.rst:1482
msgid ":mod:`pathlib`"
msgstr ""

#: library/pathlib.rst:1484
msgid ":func:`os.path.abspath`"
msgstr ""

#: library/pathlib.rst:1484
msgid ":meth:`Path.absolute` [#]_"
msgstr ""

#: library/pathlib.rst:1485
msgid ":func:`os.path.realpath`"
msgstr ""

#: library/pathlib.rst:1485
msgid ":meth:`Path.resolve`"
msgstr ""

#: library/pathlib.rst:1486
msgid ":func:`os.chmod`"
msgstr ""

#: library/pathlib.rst:1486
msgid ":meth:`Path.chmod`"
msgstr ""

#: library/pathlib.rst:1487
msgid ":func:`os.mkdir`"
msgstr ""

#: library/pathlib.rst:1488
msgid ":meth:`Path.mkdir`"
msgstr ""

#: library/pathlib.rst:1488
msgid ":func:`os.makedirs`"
msgstr ""

#: library/pathlib.rst:1489
msgid ":func:`os.rename`"
msgstr ""

#: library/pathlib.rst:1489
msgid ":meth:`Path.rename`"
msgstr ""

#: library/pathlib.rst:1490
msgid ":func:`os.replace`"
msgstr ""

#: library/pathlib.rst:1490
msgid ":meth:`Path.replace`"
msgstr ""

#: library/pathlib.rst:1491
msgid ":func:`os.rmdir`"
msgstr ""

#: library/pathlib.rst:1491
msgid ":meth:`Path.rmdir`"
msgstr ""

#: library/pathlib.rst:1492
msgid ":func:`os.remove`, :func:`os.unlink`"
msgstr ""

#: library/pathlib.rst:1492
msgid ":meth:`Path.unlink`"
msgstr ""

#: library/pathlib.rst:1493
msgid ":func:`os.getcwd`"
msgstr ""

#: library/pathlib.rst:1493
msgid ":func:`Path.cwd`"
msgstr ""

#: library/pathlib.rst:1494
msgid ":func:`os.path.exists`"
msgstr ""

#: library/pathlib.rst:1494
msgid ":meth:`Path.exists`"
msgstr ""

#: library/pathlib.rst:1495
msgid ":func:`os.path.expanduser`"
msgstr ""

#: library/pathlib.rst:1495
msgid ":meth:`Path.expanduser` and :meth:`Path.home`"
msgstr ""

#: library/pathlib.rst:1497
msgid ":func:`os.listdir`"
msgstr ""

#: library/pathlib.rst:1497
msgid ":meth:`Path.iterdir`"
msgstr ""

#: library/pathlib.rst:1498
msgid ":func:`os.walk`"
msgstr ""

#: library/pathlib.rst:1498
msgid ":meth:`Path.walk`"
msgstr ""

#: library/pathlib.rst:1499
msgid ":func:`os.path.isdir`"
msgstr ""

#: library/pathlib.rst:1499
msgid ":meth:`Path.is_dir`"
msgstr ""

#: library/pathlib.rst:1500
msgid ":func:`os.path.isfile`"
msgstr ""

#: library/pathlib.rst:1500
msgid ":meth:`Path.is_file`"
msgstr ""

#: library/pathlib.rst:1501
msgid ":func:`os.path.islink`"
msgstr ""

#: library/pathlib.rst:1501
msgid ":meth:`Path.is_symlink`"
msgstr ""

#: library/pathlib.rst:1502
msgid ":func:`os.link`"
msgstr ""

#: library/pathlib.rst:1502
msgid ":meth:`Path.hardlink_to`"
msgstr ""

#: library/pathlib.rst:1503
msgid ":func:`os.symlink`"
msgstr ""

#: library/pathlib.rst:1503
msgid ":meth:`Path.symlink_to`"
msgstr ""

#: library/pathlib.rst:1504
msgid ":func:`os.readlink`"
msgstr ""

#: library/pathlib.rst:1504
msgid ":meth:`Path.readlink`"
msgstr ""

#: library/pathlib.rst:1505
msgid ":func:`os.path.relpath`"
msgstr ""

#: library/pathlib.rst:1505
msgid ":meth:`PurePath.relative_to` [#]_"
msgstr ""

#: library/pathlib.rst:1506
msgid ":func:`os.stat`"
msgstr ""

#: library/pathlib.rst:1506
msgid ":meth:`Path.stat`, :meth:`Path.owner`, :meth:`Path.group`"
msgstr ""

#: library/pathlib.rst:1509
msgid ":func:`os.path.isabs`"
msgstr ""

#: library/pathlib.rst:1509
msgid ":meth:`PurePath.is_absolute`"
msgstr ""

#: library/pathlib.rst:1510
msgid ":func:`os.path.join`"
msgstr ""

#: library/pathlib.rst:1510
msgid ":func:`PurePath.joinpath`"
msgstr ""

#: library/pathlib.rst:1511
msgid ":func:`os.path.basename`"
msgstr ""

#: library/pathlib.rst:1511
msgid ":attr:`PurePath.name`"
msgstr ""

#: library/pathlib.rst:1512
msgid ":func:`os.path.dirname`"
msgstr ""

#: library/pathlib.rst:1512
msgid ":attr:`PurePath.parent`"
msgstr ""

#: library/pathlib.rst:1513
msgid ":func:`os.path.samefile`"
msgstr ""

#: library/pathlib.rst:1513
msgid ":meth:`Path.samefile`"
msgstr ""

#: library/pathlib.rst:1514
msgid ":func:`os.path.splitext`"
msgstr ""

#: library/pathlib.rst:1514
msgid ":attr:`PurePath.stem` and :attr:`PurePath.suffix`"
msgstr ""

#: library/pathlib.rst:1519
msgid "Footnotes"
msgstr ""

#: library/pathlib.rst:1520
msgid ""
":func:`os.path.abspath` normalizes the resulting path, which may change its "
"meaning in the presence of symlinks, while :meth:`Path.absolute` does not."
msgstr ""

#: library/pathlib.rst:1521
msgid ""
":meth:`PurePath.relative_to` requires ``self`` to be the subpath of the "
"argument, but :func:`os.path.relpath` does not."
msgstr ""

#: library/pathlib.rst:12
msgid "path"
msgstr ""

#: library/pathlib.rst:12
msgid "operations"
msgstr ""

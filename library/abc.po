# Python Documentation Turkish Translation
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-01 00:18+0000\n"
"PO-Revision-Date: 2023-08-09 13:48+0300\n"
"Last-Translator: \n"
"Language-Team: TURKISH <python.docs.tr@gmail.com>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.2.2\n"

#: library/abc.rst:2
msgid ":mod:`abc` --- Abstract Base Classes"
msgstr ":mod:`abc` --- Soyut Temel Sınıflar"

#: library/abc.rst:11
msgid "**Source code:** :source:`Lib/abc.py`"
msgstr "**Kaynak kodu:** :kaynak:`Lib/abc.py`"

#: library/abc.rst:15
msgid ""
"This module provides the infrastructure for defining :term:`abstract base "
"classes <abstract base class>` (ABCs) in Python, as outlined in :pep:`3119`; "
"see the PEP for why this was added to Python. (See also :pep:`3141` and the :"
"mod:`numbers` module regarding a type hierarchy for numbers based on ABCs.)"
msgstr ""
"Bu modül, Python'da :term:`soyut temel sınıfları <abstract base class>` "
"(ABC'ler) tanımlaması için altyapıyı sağlar, :pep:`3119`; bunun Python'a "
"neden eklendiğini öğrenmek için PEP'e bakın. (Ayrıca ABC'lere dayalı sayılar "
"için tür hiyerarşisi ile ilgili :pep:`3141` ve :mod:`numbers` modülüne "
"bakın.)"

#: library/abc.rst:20
msgid ""
"The :mod:`collections` module has some concrete classes that derive from "
"ABCs; these can, of course, be further derived. In addition, the :mod:"
"`collections.abc` submodule has some ABCs that can be used to test whether a "
"class or instance provides a particular interface, for example, if it is :"
"term:`hashable` or if it is a mapping."
msgstr ""
":mod:`collections` modülü, ABC'lerden türetilen bazı somut sınıflara "
"sahiptir; bunlar elbette daha fazla türetilebilir. Ek olarak, :mod:"
"`collections.abc` alt modülü, bir sınıfın veya örneğin belirli bir arayüzü "
"sağlayıp sağlamadığını test etmek için kullanılabilecek bazı ABC'lere "
"sahiptir; örneğin, :term:`hashable` veya bir eşleme olup olmadığı ."

#: library/abc.rst:27
msgid ""
"This module provides the metaclass :class:`ABCMeta` for defining ABCs and a "
"helper class :class:`ABC` to alternatively define ABCs through inheritance:"
msgstr ""
"Bu modül, ABC'leri tanımlamak için :class:'ABCMeta' metasınıfını ve kalıtım "
"yoluyla ABC'leri alternatif olarak tanımlamak için :class:'ABC' yardımcı "
"sınıfını sağlar:"

#: library/abc.rst:32
msgid ""
"A helper class that has :class:`ABCMeta` as its metaclass.  With this class, "
"an abstract base class can be created by simply deriving from :class:`ABC` "
"avoiding sometimes confusing metaclass usage, for example::"
msgstr ""
"Meta sınıfı olarak :class:`ABCMeta` olan bir yardımcı sınıf. Bu sınıfla, "
"bazen kafa karıştırıcı metasınıf kullanımından kaçınarak, basitçe :class:"
"`ABC` türetilerek soyut bir temel sınıf oluşturulabilir, örneğin::"

#: library/abc.rst:41
msgid ""
"Note that the type of :class:`ABC` is still :class:`ABCMeta`, therefore "
"inheriting from :class:`ABC` requires the usual precautions regarding "
"metaclass usage, as multiple inheritance may lead to metaclass conflicts. "
"One may also define an abstract base class by passing the metaclass keyword "
"and using :class:`ABCMeta` directly, for example::"
msgstr ""
":class:`ABC` türünün hala :class:`ABCMeta` olduğunu unutmayın, bu nedenle :"
"class:`ABC`den devralma, çoklu kalıtım metasınıf çakışmalarına yol "
"açabileceğinden, metasınıf kullanımına ilişkin olağan önlemleri gerektirir. "
"Metaclass anahtar sözcüğünü ileterek ve doğrudan :class:`ABCMeta` kullanarak "
"soyut bir temel sınıf da tanımlanabilir, örneğin::"

#: library/abc.rst:57
msgid "Metaclass for defining Abstract Base Classes (ABCs)."
msgstr "Soyut Temel Sınıfları (ABC'ler) tanımlamak için metasınıf."

#: library/abc.rst:59
msgid ""
"Use this metaclass to create an ABC.  An ABC can be subclassed directly, and "
"then acts as a mix-in class.  You can also register unrelated concrete "
"classes (even built-in classes) and unrelated ABCs as \"virtual subclasses\" "
"-- these and their descendants will be considered subclasses of the "
"registering ABC by the built-in :func:`issubclass` function, but the "
"registering ABC won't show up in their MRO (Method Resolution Order) nor "
"will method implementations defined by the registering ABC be callable (not "
"even via :func:`super`). [#]_"
msgstr ""
"Bir ABC oluşturmak için bu metasınıfı kullanın. Bir ABC doğrudan alt "
"sınıflara ayrılabilir ve daha sonra karma bir sınıf olarak işlev görür. "
"Ayrıca ilgisiz somut sınıfları (hatta yerleşik sınıfları) ve ilgisiz "
"ABC'leri \"sanal alt sınıflar\" olarak kaydedebilirsiniz -- bunlar ve "
"onların alt sınıfları, yerleşik :func:`issubclass` işlevi tarafından kayıt "
"yapan ABC'nin alt sınıfları olarak kabul edilecektir, ancak kaydeden ABC, "
"MRO'larında (Yöntem Çözüm Sırası) görünmeyecek ve kaydeden ABC tarafından "
"tanımlanan yöntem uygulamaları çağrılabilir olmayacaktır ( :func:`super` "
"yoluyla bile değil). [#]_"

#: library/abc.rst:68
msgid ""
"Classes created with a metaclass of :class:`ABCMeta` have the following "
"method:"
msgstr ""
":class:`ABCMeta` metasınıfı ile oluşturulan sınıflar aşağıdaki yönteme "
"sahiptir:"

#: library/abc.rst:72
msgid ""
"Register *subclass* as a \"virtual subclass\" of this ABC. For example::"
msgstr ""
"*alt sınıfı* bu ABC'nin \"sanal alt sınıfı\" olarak kaydedin. Örneğin::"

#: library/abc.rst:85
msgid "Returns the registered subclass, to allow usage as a class decorator."
msgstr ""
"Sınıf dekoratörü olarak kullanıma izin vermek için kayıtlı alt sınıfı "
"döndürür."

#: library/abc.rst:88
msgid ""
"To detect calls to :meth:`register`, you can use the :func:`get_cache_token` "
"function."
msgstr ""
":meth:`register` çağrılarını algılamak için :func:`get_cache_token` işlevini "
"kullanabilirsiniz."

#: library/abc.rst:92
msgid "You can also override this method in an abstract base class:"
msgstr "Bu yöntemi soyut bir temel sınıfta da geçersiz kılabilirsiniz:"

#: library/abc.rst:96
msgid "(Must be defined as a class method.)"
msgstr "(Bir sınıf yöntemi olarak tanımlanmalıdır.)"

#: library/abc.rst:98
msgid ""
"Check whether *subclass* is considered a subclass of this ABC.  This means "
"that you can customize the behavior of ``issubclass`` further without the "
"need to call :meth:`register` on every class you want to consider a subclass "
"of the ABC.  (This class method is called from the :meth:`__subclasscheck__` "
"method of the ABC.)"
msgstr ""
"*alt sınıfın* bu ABC'nin bir alt sınıfı olarak kabul edilip edilmediğini "
"kontrol edin. Bu, ABC'nin bir alt sınıfı olarak kabul etmek istediğiniz her "
"sınıfta :meth:'register' çağırmaya gerek kalmadan \"issubclass\" davranışını "
"daha fazla özelleştirebileceğiniz anlamına gelir. (Bu sınıf yöntemi, "
"ABC'nin :meth:`__subclasscheck__` yönteminden çağrılır.)"

#: library/abc.rst:104
msgid ""
"This method should return ``True``, ``False`` or ``NotImplemented``.  If it "
"returns ``True``, the *subclass* is considered a subclass of this ABC. If it "
"returns ``False``, the *subclass* is not considered a subclass of this ABC, "
"even if it would normally be one.  If it returns ``NotImplemented``, the "
"subclass check is continued with the usual mechanism."
msgstr ""
"Bu yöntem \"True\", \"False\" veya \"NotImplemented\" döndürmelidir. "
"``True`` döndürürse, *alt sınıf* bu ABC'nin bir alt sınıfı olarak kabul "
"edilir. ``False`` değerini döndürürse, *alt sınıf*, normalde öyle olsa bile, "
"bu ABC'nin bir alt sınıfı olarak kabul edilmez. ``NotImplemented`` "
"döndürürse, alt sınıf kontrolü olağan mekanizma ile devam eder."

#: library/abc.rst:114
msgid ""
"For a demonstration of these concepts, look at this example ABC definition::"
msgstr "Bu kavramların bir gösterimi için şu örnek ABC tanımına bakın:"

#: library/abc.rst:143
msgid ""
"The ABC ``MyIterable`` defines the standard iterable method, :meth:"
"`~iterator.__iter__`, as an abstract method.  The implementation given here "
"can still be called from subclasses.  The :meth:`get_iterator` method is "
"also part of the ``MyIterable`` abstract base class, but it does not have to "
"be overridden in non-abstract derived classes."
msgstr ""
"ABC ``MyIterable``, standart yinelenebilir yöntemi :meth:`~iterator."
"__iter__` soyut bir yöntem olarak tanımlar. Burada verilen uygulama yine de "
"alt sınıflardan çağrılabilir. :meth:`get_iterator` yöntemi ayrıca "
"``MyIterable`` soyut temel sınıfının bir parçasıdır, ancak soyut olmayan "
"türetilmiş sınıflarda geçersiz kılınması gerekmez."

#: library/abc.rst:149
msgid ""
"The :meth:`__subclasshook__` class method defined here says that any class "
"that has an :meth:`~iterator.__iter__` method in its :attr:`~object."
"__dict__` (or in that of one of its base classes, accessed via the :attr:"
"`~class.__mro__` list) is considered a ``MyIterable`` too."
msgstr ""
"Burada tanımlanan :meth:`__subclasshook__` sınıf yöntemi, :attr:`~object."
"__dict__` (veya temel sınıflarından birinin sınıfında) :meth:`~iterator."
"__iter__` yöntemine sahip herhangi bir sınıfın, :attr:`~class.__mro__` "
"listesi aracılığıyla erişilen) de bir ``MyIterable`` olarak kabul edilir."

#: library/abc.rst:154
msgid ""
"Finally, the last line makes ``Foo`` a virtual subclass of ``MyIterable``, "
"even though it does not define an :meth:`~iterator.__iter__` method (it uses "
"the old-style iterable protocol, defined in terms of :meth:`__len__` and :"
"meth:`__getitem__`).  Note that this will not make ``get_iterator`` "
"available as a method of ``Foo``, so it is provided separately."
msgstr ""
"Son olarak, bir :meth:`~iterator.__iter__` yöntemi tanımlamasa da son satır "
"``Foo``yu ``MyIterable``ın sanal bir alt sınıfı yapar (eski stil "
"yinelenebilir protokolü kullanır, :meth:`__len__` ve :meth:`__getitem__` "
"terimleri). Bunun, ``get_iterator``ı bir ``Foo`` yöntemi olarak "
"kullanılabilir kılmayacağına dikkat edin, bu nedenle ayrı olarak sağlanır."

#: library/abc.rst:163
msgid "The :mod:`abc` module also provides the following decorator:"
msgstr ":mod:`abc` modülü ayrıca aşağıdaki dekoratörü sağlar:"

#: library/abc.rst:167
msgid "A decorator indicating abstract methods."
msgstr "Soyut yöntemleri gösteren bir dekoratör."

#: library/abc.rst:169
msgid ""
"Using this decorator requires that the class's metaclass is :class:`ABCMeta` "
"or is derived from it.  A class that has a metaclass derived from :class:"
"`ABCMeta` cannot be instantiated unless all of its abstract methods and "
"properties are overridden.  The abstract methods can be called using any of "
"the normal 'super' call mechanisms.  :func:`abstractmethod` may be used to "
"declare abstract methods for properties and descriptors."
msgstr ""
"Bu dekoratörü kullanmak, sınıfın metasınıfının :class:`ABCMeta` olmasını "
"veya ondan türetilmesini gerektirir. :class:`ABCMeta` öğesinden türetilmiş "
"bir metasınıfı olan bir sınıf, tüm soyut yöntemleri ve özellikleri geçersiz "
"kılınmadıkça örneklendirilemez. Soyut yöntemler, normal 'süper' çağrı "
"mekanizmalarından herhangi biri kullanılarak çağrılabilir. :func:"
"`abstractmethod`, özellikler ve tanımlayıcılar için soyut yöntemleri "
"bildirmek için kullanılabilir."

#: library/abc.rst:176
msgid ""
"Dynamically adding abstract methods to a class, or attempting to modify the "
"abstraction status of a method or class once it is created, are only "
"supported using the :func:`update_abstractmethods` function.  The :func:"
"`abstractmethod` only affects subclasses derived using regular inheritance; "
"\"virtual subclasses\" registered with the ABC's :meth:`register` method are "
"not affected."
msgstr ""
"Bir sınıfa dinamik olarak soyut yöntemler eklemek veya oluşturulduktan sonra "
"bir yöntemin veya sınıfın soyutlama durumunu değiştirmeye çalışmak, "
"yalnızca :func:`update_abstractmethods` işlevi kullanılarak desteklenir. :"
"func:`abstractmethod` yalnızca normal kalıtım kullanılarak türetilen alt "
"sınıfları etkiler; ABC'nin :meth:`register` yöntemiyle kaydedilen \"sanal "
"alt sınıflar\" etkilenmez."

#: library/abc.rst:183
msgid ""
"When :func:`abstractmethod` is applied in combination with other method "
"descriptors, it should be applied as the innermost decorator, as shown in "
"the following usage examples::"
msgstr ""
":func:`abstractmethod` diğer yöntem tanımlayıcılarla birlikte "
"uygulandığında, aşağıdaki kullanım örneklerinde gösterildiği gibi en içteki "
"dekoratör olarak uygulanmalıdır::"

#: library/abc.rst:217
msgid ""
"In order to correctly interoperate with the abstract base class machinery, "
"the descriptor must identify itself as abstract using :attr:"
"`__isabstractmethod__`. In general, this attribute should be ``True`` if any "
"of the methods used to compose the descriptor are abstract. For example, "
"Python's built-in :class:`property` does the equivalent of::"
msgstr ""
"Soyut temel sınıf mekanizmasıyla doğru şekilde birlikte çalışabilmek için, "
"tanımlayıcı :attr:`__isabstractmethod__` kullanarak kendisini soyut olarak "
"tanımlamalıdır. Genel olarak, tanımlayıcıyı oluşturmak için kullanılan "
"yöntemlerden herhangi biri soyutsa, bu öznitelik ``True`` olmalıdır. "
"Örneğin, Python'un yerleşik :class:`property` şuna eşdeğerdir::"

#: library/abc.rst:232
msgid ""
"Unlike Java abstract methods, these abstract methods may have an "
"implementation. This implementation can be called via the :func:`super` "
"mechanism from the class that overrides it.  This could be useful as an end-"
"point for a super-call in a framework that uses cooperative multiple-"
"inheritance."
msgstr ""
"Java soyut yöntemlerinin aksine, bu soyut yöntemlerin bir uygulaması "
"olabilir. Bu uygulama, onu geçersiz kılan sınıftan :func:`super` mekanizması "
"aracılığıyla çağrılabilir. Bu, işbirlikçi çoklu kalıtımı kullanan bir "
"çerçevede bir süper çağrı için son nokta olarak yararlı olabilir."

#: library/abc.rst:239
msgid "The :mod:`abc` module also supports the following legacy decorators:"
msgstr ":mod:`abc` modülü ayrıca aşağıdaki eski dekoratörleri de destekler:"

#: library/abc.rst:244
msgid ""
"It is now possible to use :class:`classmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Artık :class:`classmethod` ile :func:`abstractmethod` kullanmak mümkündür, "
"bu dekoratörü gereksiz kılar."

#: library/abc.rst:248
msgid ""
"A subclass of the built-in :func:`classmethod`, indicating an abstract "
"classmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""
"Soyut bir sınıf yöntemini gösteren yerleşik :func:`classmethod` alt sınıfı. "
"Aksi takdirde :func:`abstractmethod`a benzer."

#: library/abc.rst:251
msgid ""
"This special case is deprecated, as the :func:`classmethod` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
":func:`classmethod` dekoratörü, bir soyut yönteme uygulandığında artık doğru "
"bir şekilde soyut olarak tanımlandığından, bu özel durum kullanımdan "
"kaldırılmıştır::"

#: library/abc.rst:265
msgid ""
"It is now possible to use :class:`staticmethod` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Artık :class:`staticmethod` ile :func:`abstractmethod` kullanmak mümkündür, "
"bu dekoratörü gereksiz kılar."

#: library/abc.rst:269
msgid ""
"A subclass of the built-in :func:`staticmethod`, indicating an abstract "
"staticmethod. Otherwise it is similar to :func:`abstractmethod`."
msgstr ""
"Yerleşik :func:`staticmethod` alt sınıfı, soyut bir staticmethod belirtir. "
"Aksi takdirde :func:`abstractmethod`a benzer."

#: library/abc.rst:272
msgid ""
"This special case is deprecated, as the :func:`staticmethod` decorator is "
"now correctly identified as abstract when applied to an abstract method::"
msgstr ""
":func:`staticmethod` dekoratörü, bir soyut yönteme uygulandığında artık "
"doğru bir şekilde soyut olarak tanımlandığından, bu özel durum kullanımdan "
"kaldırılmıştır::"

#: library/abc.rst:285
msgid ""
"It is now possible to use :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` and :meth:`property.deleter` with :func:`abstractmethod`, "
"making this decorator redundant."
msgstr ""
"Bu dekoratörü yapmak için :class:`property`, :meth:`property.getter`, :meth:"
"`property.setter` ve :meth:`property.deleter` :func:`abstractmethod` ile "
"kullanmak artık mümkün gereksiz."

#: library/abc.rst:290
msgid ""
"A subclass of the built-in :func:`property`, indicating an abstract property."
msgstr "Yerleşik :func:`property` alt sınıfı, soyut bir özelliği belirtir."

#: library/abc.rst:293
msgid ""
"This special case is deprecated, as the :func:`property` decorator is now "
"correctly identified as abstract when applied to an abstract method::"
msgstr ""
":func:`property` dekoratörü, bir soyut yönteme uygulandığında artık doğru "
"bir şekilde soyut olarak tanımlandığından, bu özel durum kullanımdan "
"kaldırılmıştır::"

#: library/abc.rst:303
msgid ""
"The above example defines a read-only property; you can also define a read-"
"write abstract property by appropriately marking one or more of the "
"underlying methods as abstract::"
msgstr ""
"Yukarıdaki örnek salt okunur bir özelliği tanımlar; temel alınan "
"yöntemlerden birini veya daha fazlasını uygun şekilde abstract olarak "
"işaretleyerek bir read-write abstract özelliği de tanımlayabilirsiniz:"

#: library/abc.rst:317
msgid ""
"If only some components are abstract, only those components need to be "
"updated to create a concrete property in a subclass::"
msgstr ""
"Yalnızca bazı bileşenler soyutsa, bir alt sınıfta somut bir özellik "
"oluşturmak için yalnızca bu bileşenlerin güncellenmesi gerekir::"

#: library/abc.rst:326
msgid "The :mod:`abc` module also provides the following functions:"
msgstr ":mod:`abc` modülü ayrıca aşağıdaki işlevleri sağlar:"

#: library/abc.rst:330
msgid "Returns the current abstract base class cache token."
msgstr "Geçerli soyut temel sınıf önbellek belirtecini döndürür."

#: library/abc.rst:332
msgid ""
"The token is an opaque object (that supports equality testing) identifying "
"the current version of the abstract base class cache for virtual subclasses. "
"The token changes with every call to :meth:`ABCMeta.register` on any ABC."
msgstr ""
"Belirteç, sanal alt sınıflar için soyut temel sınıf önbelleğinin geçerli "
"sürümünü tanımlayan opak bir nesnedir (eşitlik testini destekler). Belirteç, "
"herhangi bir ABC'de :meth:`ABCMeta.register` öğesine yapılan her çağrıda "
"değişir."

#: library/abc.rst:340
msgid ""
"A function to recalculate an abstract class's abstraction status. This "
"function should be called if a class's abstract methods have been "
"implemented or changed after it was created. Usually, this function should "
"be called from within a class decorator."
msgstr ""
"Soyut bir sınıfın soyutlama durumunu yeniden hesaplama işlevi. Bu işlev, bir "
"sınıfın soyut yöntemleri oluşturulduktan sonra uygulanmış veya "
"değiştirilmişse çağrılmalıdır. Genellikle, bu işlev bir sınıf dekoratörü "
"içinden çağrılmalıdır."

#: library/abc.rst:345
msgid "Returns *cls*, to allow usage as a class decorator."
msgstr "Sınıf dekoratörü olarak kullanıma izin vermek için *cls* döndürür."

#: library/abc.rst:347
msgid "If *cls* is not an instance of :class:`ABCMeta`, does nothing."
msgstr "*cls* bir :class:`ABCMeta` örneği değilse hiçbir şey yapmaz."

#: library/abc.rst:351
msgid ""
"This function assumes that *cls*'s superclasses are already updated. It does "
"not update any subclasses."
msgstr ""
"Bu işlev, *cls*'nin üst sınıflarının halihazırda güncellendiğini varsayar. "
"Herhangi bir alt sınıfı güncellemez."

#: library/abc.rst:357
msgid "Footnotes"
msgstr "Dipnotlar"

#: library/abc.rst:358
msgid ""
"C++ programmers should note that Python's virtual base class concept is not "
"the same as C++'s."
msgstr ""
"C++ programcıları, Python'un sanal temel sınıf konseptinin C++ ile aynı "
"olmadığını unutmamalıdır."

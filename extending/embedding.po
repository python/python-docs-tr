# Python Documentation Turkish Translation
# Copyright (C) 2001-2023, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
msgid ""
msgstr ""
"Project-Id-Version: Python 3.11\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-17 01:28+0300\n"
"PO-Revision-Date: 2022-12-29 00:34-0500\n"
"Last-Translator: \n"
"Language-Team: TURKISH <python.docs.tr@gmail.com>\n"
"Language: tr\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Generator: Poedit 3.2.2\n"

#: extending/embedding.rst:8
msgid "Embedding Python in Another Application"
msgstr "Python'ı Başka Bir Uygulamaya Gömme"

#: extending/embedding.rst:10
msgid ""
"The previous chapters discussed how to extend Python, that is, how to extend "
"the functionality of Python by attaching a library of C functions to it.  It "
"is also possible to do it the other way around: enrich your C/C++ "
"application by embedding Python in it.  Embedding provides your application "
"with the ability to implement some of the functionality of your application "
"in Python rather than C or C++. This can be used for many purposes; one "
"example would be to allow users to tailor the application to their needs by "
"writing some scripts in Python.  You can also use it yourself if some of the "
"functionality can be written in Python more easily."
msgstr ""
"Önceki bölümlerde Python'un nasıl genişletileceği, yani Python'a bir C "
"fonksiyonları kitaplığı ekleyerek Python'un işlevselliğinin nasıl "
"genişletileceği tartışıldı. Bunu ayrıca tam tersi şekilde de yapmak "
"mümkündür: Python'u içine gömerek C/C++ uygulamanızı zenginleştirin. Gömme "
"işlemi, uygulamanıza bazı işlevlerini C veya C++ yerine Python'da uygulama "
"yeteneği sağlar. Bu birçok amaç için kullanılabilir; bir örnek olarak "
"kullanıcıların Python'da bazı komut dosyaları yazarak uygulamayı "
"ihtiyaçlarına göre uyarlamalarına izin vermek olabilir. Bazı işlevler "
"Python'da daha kolay yazılabilecekse kendiniz de kullanabilirsiniz."

#: extending/embedding.rst:20
msgid ""
"Embedding Python is similar to extending it, but not quite.  The difference "
"is that when you extend Python, the main program of the application is still "
"the Python interpreter, while if you embed Python, the main program may have "
"nothing to do with Python --- instead, some parts of the application "
"occasionally call the Python interpreter to run some Python code."
msgstr ""
"Python'u gömmek, onu genişletmeye benzer, ancak tam olarak değil. "
"Aralarındaki farksa Python'u genişlettiğinizde, uygulamanın ana programının "
"hala Python yorumlayıcısı olması; Python'u gömerseniz, ana programın Python "
"ile hiçbir ilgisi olmayabilmesidir --- bunun yerine, uygulamanın bazı "
"bölümleri bazı Python kodlarını çalıştırmak için zaman zaman Python "
"yorumlayıcısını çağırır."

#: extending/embedding.rst:26
msgid ""
"So if you are embedding Python, you are providing your own main program.  "
"One of the things this main program has to do is initialize the Python "
"interpreter.  At the very least, you have to call the function :c:func:"
"`Py_Initialize`.  There are optional calls to pass command line arguments to "
"Python.  Then later you can call the interpreter from any part of the "
"application."
msgstr ""
"Yani Python'u gömüyorsanız, kendi ana programınızı sağlıyorsunuz demektir. "
"Bu ana programın yapması gereken şeylerden biri Python yorumlayıcısını "
"başlatmaktır. En azından :c:func:`Py_Initialize` fonksiyonunu "
"çağırmalısınız. Python'a komut satırı argümanlarını iletmek için opsiyonel "
"çağrılar vardır. Daha sonra uygulamanın herhangi bir yerinden yorumlayıcıyı "
"çağırabilirsiniz."

#: extending/embedding.rst:32
msgid ""
"There are several different ways to call the interpreter: you can pass a "
"string containing Python statements to :c:func:`PyRun_SimpleString`, or you "
"can pass a stdio file pointer and a file name (for identification in error "
"messages only) to :c:func:`PyRun_SimpleFile`.  You can also call the lower-"
"level operations described in the previous chapters to construct and use "
"Python objects."
msgstr ""
"Yorumlayıcıyı çağırmanın birkaç farklı yolu vardır: Python deyimlerini "
"içeren bir dizeyi :c:func:`PyRun_SimpleString` öğesine veya bir stdio dosya "
"işaretçisini ve bir dosya adını (yalnızca hata mesajlarında tanımlama için) :"
"c:func:`PyRun_SimpleFile` 'a iletebilirsiniz. Python nesnelerini oluşturmak "
"ve kullanmak için önceki bölümlerde açıklanan alt düzey işlemleri de "
"çağırabilirsiniz."

#: extending/embedding.rst:42
msgid ":ref:`c-api-index`"
msgstr ":ref:`c-api-index`"

#: extending/embedding.rst:42
msgid ""
"The details of Python's C interface are given in this manual. A great deal "
"of necessary information can be found here."
msgstr ""
"Python'un C arayüzünün detayları bu kılavuzda verilmiştir. Çok sayıda "
"gerekli bilgi burada bulunabilir."

#: extending/embedding.rst:49
msgid "Very High Level Embedding"
msgstr "Çok Üst Düzey Gömme"

#: extending/embedding.rst:51
msgid ""
"The simplest form of embedding Python is the use of the very high level "
"interface. This interface is intended to execute a Python script without "
"needing to interact with the application directly. This can for example be "
"used to perform some operation on a file. ::"
msgstr ""
"Python'u gömmenin en basit şekli, çok yüksek seviyeli arayüzün "
"kullanılmasıdır. Bu arabirim, uygulamayla doğrudan etkileşime girmeye gerek "
"kalmadan bir Python betiği yürütmeyi amaçlamaktadır. Bu örnek olarak bir "
"dosya üzerinde bazı işlemler gerçekleştirmek için kullanılabilir. ::"

#: extending/embedding.rst:78
msgid ""
"The :c:func:`Py_SetProgramName` function should be called before :c:func:"
"`Py_Initialize` to inform the interpreter about paths to Python run-time "
"libraries.  Next, the Python interpreter is initialized with :c:func:"
"`Py_Initialize`, followed by the execution of a hard-coded Python script "
"that prints the date and time.  Afterwards, the :c:func:`Py_FinalizeEx` call "
"shuts the interpreter down, followed by the end of the program.  In a real "
"program, you may want to get the Python script from another source, perhaps "
"a text-editor routine, a file, or a database.  Getting the Python code from "
"a file can better be done by using the :c:func:`PyRun_SimpleFile` function, "
"which saves you the trouble of allocating memory space and loading the file "
"contents."
msgstr ""
":c:func:`Py_SetProgramName` işlevi, yorumlayıcıyı Python çalışma zamanı "
"kütüphanelerine giden yollar hakkında bilgilendirmek için :c:func:"
"`Py_Initialize` öncesinde çağrılmalıdır. Ardından, Python yorumlayıcısı :c:"
"func:`Py_Initialize` ile başlatılır, ardından tarih ve saati yazdıran sabit "
"kodlanmış bir Python betiği yürütülür. Daha sonra, :c:func:`Py_FinalizeEx` "
"çağrısı yorumlayıcıyı kapatır ve ardından programın sonu gelir. Gerçek bir "
"programda, Python betiğini başka bir kaynaktan, belki bir metin düzenleyici "
"rutininden, bir dosyadan veya bir veri tabanından almak isteyebilirsiniz. "
"Python kodunu bir dosyadan almak, sizi bellek alanı ayırma ve dosya "
"içeriğini yükleme zahmetinden kurtaran :c:func:`PyRun_SimpleFile` işlevi "
"kullanılarak daha iyi yapılabilir."

#: extending/embedding.rst:93
msgid "Beyond Very High Level Embedding: An overview"
msgstr "Çok Yüksek Düzeyde Gömmenin Ötesinde: Genel Bir Bakış"

#: extending/embedding.rst:95
msgid ""
"The high level interface gives you the ability to execute arbitrary pieces "
"of Python code from your application, but exchanging data values is quite "
"cumbersome to say the least. If you want that, you should use lower level "
"calls. At the cost of having to write more C code, you can achieve almost "
"anything."
msgstr ""
"Yüksek seviyeli arayüz size uygulamanızdan rastgele Python kodu parçalarını "
"yürütme yeteneği verir, ancak veri değerleri alışverişi en hafif tabirle "
"oldukça zahmetlidir. Bunu istiyorsanız, daha düşük seviyeli aramalar "
"kullanmalısınız. Daha fazla C kodu yazmak zorunda kalma pahasına neredeyse "
"her şeyi başarabilirsiniz."

#: extending/embedding.rst:100
msgid ""
"It should be noted that extending Python and embedding Python is quite the "
"same activity, despite the different intent. Most topics discussed in the "
"previous chapters are still valid. To show this, consider what the extension "
"code from Python to C really does:"
msgstr ""
"Farklı amaçlara rağmen Python'u genişletmek ve Python'u gömmek tamamen aynı "
"aktivitedir. Önceki bölümlerde tartışılan konuların çoğu hala geçerlidir. "
"Bunu göstermek için Python'dan C'ye uzantı kodunun gerçekten ne yaptığını "
"düşünün:"

#: extending/embedding.rst:105
msgid "Convert data values from Python to C,"
msgstr "Veri değerlerini Python'dan C'ye çevirin,"

#: extending/embedding.rst:107
msgid "Perform a function call to a C routine using the converted values, and"
msgstr ""
"Çevrilen değerleri kullanarak bir C rutinine bir fonksiyon çağrısı yapın, ve"

#: extending/embedding.rst:109
msgid "Convert the data values from the call from C to Python."
msgstr "Çağrıdaki veri değerlerini C'den Python'a çevirin."

#: extending/embedding.rst:111
msgid "When embedding Python, the interface code does:"
msgstr "Python'u yerleştirirken, arayüz kodu şunları yapar:"

#: extending/embedding.rst:113
msgid "Convert data values from C to Python,"
msgstr "Veri değerlerini C'den Python'a çevirin,"

#: extending/embedding.rst:115
msgid ""
"Perform a function call to a Python interface routine using the converted "
"values, and"
msgstr ""
"Çevrilen değerleri kullanarak bir Python arabirim rutinine bir fonksiyon "
"çağrısı gerçekleştirin ve"

#: extending/embedding.rst:118
msgid "Convert the data values from the call from Python to C."
msgstr "Çağrıdaki veri değerlerini C'den Python'a dönüştürün."

#: extending/embedding.rst:120
msgid ""
"As you can see, the data conversion steps are simply swapped to accommodate "
"the different direction of the cross-language transfer. The only difference "
"is the routine that you call between both data conversions. When extending, "
"you call a C routine, when embedding, you call a Python routine."
msgstr ""
"Gördüğünüz gibi, veri dönüştürme adımları, diller arası aktarımın farklı "
"yönüne uyum sağlamak için basitçe değiştirilir. Tek fark, her iki veri "
"dönüşümü arasında çağırdığınız rutindir. Uzatırken C rutini çağırırsınız, "
"gömerken Python rutini çağırırsınız."

#: extending/embedding.rst:125
msgid ""
"This chapter will not discuss how to convert data from Python to C and vice "
"versa.  Also, proper use of references and dealing with errors is assumed to "
"be understood.  Since these aspects do not differ from extending the "
"interpreter, you can refer to earlier chapters for the required information."
msgstr ""
"Bu bölüm, verilerin Python'dan C'ye nasıl dönüştürüleceğini ve bunun tam "
"tersini tartışmayacaktır. Ayrıca, referansların doğru kullanımı ve hataların "
"ele alınmasının anlaşıldığı varsayılmaktadır. Bu hususlar, yorumlayıcının "
"genişletilmesinden farklı olmadığı için, gerekli bilgiler için önceki "
"bölümlere başvurabilirsiniz."

#: extending/embedding.rst:134
msgid "Pure Embedding"
msgstr "Saf Gömme"

#: extending/embedding.rst:136
msgid ""
"The first program aims to execute a function in a Python script. Like in the "
"section about the very high level interface, the Python interpreter does not "
"directly interact with the application (but that will change in the next "
"section)."
msgstr ""
"İlk program, bir Python betiğinde bir fonksiyonu çalıştırmayı amaçlar. Çok "
"yüksek seviyeli arayüzle ilgili bölümde olduğu gibi, Python yorumlayıcısı "
"uygulama ile doğrudan etkileşime girmez (ancak bu bir sonraki bölümde "
"değişecektir)."

#: extending/embedding.rst:141
msgid "The code to run a function defined in a Python script is:"
msgstr "Python betiğinde tanımlanan bir işlevi çalıştırma kodu:"

#: extending/embedding.rst:146
msgid ""
"This code loads a Python script using ``argv[1]``, and calls the function "
"named in ``argv[2]``.  Its integer arguments are the other values of the "
"``argv`` array.  If you :ref:`compile and link <compiling>` this program "
"(let's call the finished executable :program:`call`), and use it to execute "
"a Python script, such as:"
msgstr ""
"Bu kod, ``argv[1]`` kullanarak bir Python betiği yükler ve ``argv[2]`` "
"içinde adlandırılan fonksiyonu çağırır. Tamsayı argümanları, ``argv`` "
"dizisinin diğer değerleridir. Bu programı :ref:`derler, <compiling>`  ve "
"bağlarsanız (bitmiş yürütülebilir dosyayı :program:`call` olarak "
"adlandıralım) ve onu aşağıdaki gibi bir Python betiğini çalıştırmak için "
"kullanırsanız:"

#: extending/embedding.rst:161
msgid "then the result should be:"
msgstr "o zaman sonuç olmalıdır:"

#: extending/embedding.rst:169
msgid ""
"Although the program is quite large for its functionality, most of the code "
"is for data conversion between Python and C, and for error reporting.  The "
"interesting part with respect to embedding Python starts with ::"
msgstr ""
"Program işlevselliği açısından oldukça büyük olmasına rağmen, kodun çoğu "
"Python ve C arasında veri dönüştürme ve hata raporlama içindir. Python'u "
"gömmekle ilgili ilginç kısım şununla başlar ::"

#: extending/embedding.rst:178
msgid ""
"After initializing the interpreter, the script is loaded using :c:func:"
"`PyImport_Import`.  This routine needs a Python string as its argument, "
"which is constructed using the :c:func:`PyUnicode_FromString` data "
"conversion routine. ::"
msgstr ""
"Yorumlayıcıyı başlattıktan sonra komut dosyası :c:func:`PyImport_Import` "
"kullanılarak yüklenir. Bu rutin, argümanı olarak :c:func:"
"`PyUnicode_FromString` veri dönüştürme rutini kullanılarak oluşturulan bir "
"Python dizesine ihtiyaç duyar. ::"

#: extending/embedding.rst:191
msgid ""
"Once the script is loaded, the name we're looking for is retrieved using :c:"
"func:`PyObject_GetAttrString`.  If the name exists, and the object returned "
"is callable, you can safely assume that it is a function.  The program then "
"proceeds by constructing a tuple of arguments as normal.  The call to the "
"Python function is then made with::"
msgstr ""
"Komut dosyası yüklendikten sonra, aradığımız ad :c:func:"
"`PyObject_GetAttrString` kullanılarak alınır. Ad varsa ve döndürülen nesne "
"çağrılabilirse bunun bir fonksiyon olduğunu güvenle varsayabilirsiniz. "
"Program daha sonra normal olarak bir dizi argüman oluşturarak devam eder. "
"Python işlevine yapılan çağrı şu şekilde yapılır:"

#: extending/embedding.rst:199
msgid ""
"Upon return of the function, ``pValue`` is either ``NULL`` or it contains a "
"reference to the return value of the function.  Be sure to release the "
"reference after examining the value."
msgstr ""
"Fonksiyon döndürüldüğünde, ``pValue`` ya ``NULL`` olur ya da fonksiyonun "
"dönüş değerine bir başvuru içerir. Değeri inceledikten sonra referans "
"bıraktığınızdan emin olun."

#: extending/embedding.rst:207
msgid "Extending Embedded Python"
msgstr "Gömülü Python'u Genişletme"

#: extending/embedding.rst:209
msgid ""
"Until now, the embedded Python interpreter had no access to functionality "
"from the application itself.  The Python API allows this by extending the "
"embedded interpreter.  That is, the embedded interpreter gets extended with "
"routines provided by the application. While it sounds complex, it is not so "
"bad.  Simply forget for a while that the application starts the Python "
"interpreter.  Instead, consider the application to be a set of subroutines, "
"and write some glue code that gives Python access to those routines, just "
"like you would write a normal Python extension.  For example::"
msgstr ""
"Şimdiye kadar, gömülü Python yorumlayıcısının uygulamanın kendisinden "
"işlevselliğe erişimi yoktu. Python API, gömülü yorumlayıcıyı genişleterek "
"buna izin verir. Yani, gömülü yorumlayıcı, uygulama tarafından sağlanan "
"rutinlerle genişletilir. Kulağa karmaşık gelse de, o kadar da kötü değil. "
"Uygulamanın Python yorumlayıcısını başlattığını bir süreliğine unutun. Bunun "
"yerine, uygulamayı bir dizi altyordam olarak düşünün ve tıpkı normal bir "
"Python uzantısı yazacağınız gibi, Python'un bu rutinlere erişmesini sağlayan "
"bir tutkal kodu yazın. Örneğin::"

#: extending/embedding.rst:246
msgid ""
"Insert the above code just above the :c:func:`main` function. Also, insert "
"the following two statements before the call to :c:func:`Py_Initialize`::"
msgstr ""
"Yukarıdaki kodu :c:func:`main` fonksiyonunun hemen üstüne ekleyin. Ayrıca, :"
"c:func:`Py_Initialize`: çağrısından önce aşağıdaki iki ifadeyi ekleyin::"

#: extending/embedding.rst:252
msgid ""
"These two lines initialize the ``numargs`` variable, and make the :func:`emb."
"numargs` function accessible to the embedded Python interpreter. With these "
"extensions, the Python script can do things like"
msgstr ""
"Bu iki satır ``numargs`` değişkenini başlatır ve :func:`emb.numargs` "
"fonksiyonunu gömülü Python yorumlayıcısı için erişilebilir kılar. Bu "
"uzantılarla Python betiği şekilde gibi şeyler yapabilir"

#: extending/embedding.rst:261
msgid ""
"In a real application, the methods will expose an API of the application to "
"Python."
msgstr ""
"Gerçek bir uygulamada, yöntemler uygulamanın API'sini Python'a gösterir."

#: extending/embedding.rst:271
msgid "Embedding Python in C++"
msgstr "Python'u C++'a Gömmek"

#: extending/embedding.rst:273
msgid ""
"It is also possible to embed Python in a C++ program; precisely how this is "
"done will depend on the details of the C++ system used; in general you will "
"need to write the main program in C++, and use the C++ compiler to compile "
"and link your program.  There is no need to recompile Python itself using C+"
"+."
msgstr ""
"Python'u bir C++ programına yerleştirmek de mümkündür; bunun tam olarak "
"nasıl yapılacağı, kullanılan C++ sisteminin ayrıntılarına bağlı olacaktır; "
"genel olarak ana programı C++ ile yazmanız ve programınızı derlemek ve "
"bağlamak için C++ derleyicisini kullanmanız gerekecektir. Python'un "
"kendisini C++ kullanarak yeniden derlemeye gerek yoktur."

#: extending/embedding.rst:282
msgid "Compiling and Linking under Unix-like systems"
msgstr "Unix benzeri sistemler altında Derleme ve Bağlama"

#: extending/embedding.rst:284
msgid ""
"It is not necessarily trivial to find the right flags to pass to your "
"compiler (and linker) in order to embed the Python interpreter into your "
"application, particularly because Python needs to load library modules "
"implemented as C dynamic extensions (:file:`.so` files) linked against it."
msgstr ""
"Python yorumlayıcısını uygulamanıza gömmek için derleyicinize (ve "
"bağlayıcınıza) iletilecek doğru bayrakları bulmak mutlaka önemli değildir, "
"özellikle Python'un C dinamik uzantıları buna karşı bağlatılı olan (:file:`."
"so`  dosyaları) olarak uygulanan kütüphane modüllerini yüklemesi "
"gerektiğinden."

#: extending/embedding.rst:290
msgid ""
"To find out the required compiler and linker flags, you can execute the :"
"file:`python{X.Y}-config` script which is generated as part of the "
"installation process (a :file:`python3-config` script may also be "
"available).  This script has several options, of which the following will be "
"directly useful to you:"
msgstr ""
"Gerekli derleyici ve bağlayıcı bayraklarını bulmak için, yükleme işleminin "
"bir parçası olarak oluşturulan :file:`python{X.Y}-config` betiğini "
"çalıştırabilirsiniz (bir :file:`python3-config` betiği de mevcut olabilir). "
"Bu komut dosyası, size doğrudan yardımcı olacak birkaç seçeneğe sahiptir:"

#: extending/embedding.rst:296
msgid ""
"``pythonX.Y-config --cflags`` will give you the recommended flags when "
"compiling:"
msgstr ""
"``pythonX.Y-config --cflags`` derleme sırasında size önerilen bayrakları "
"verecektir:"

#: extending/embedding.rst:304
msgid ""
"``pythonX.Y-config --ldflags --embed`` will give you the recommended flags "
"when linking:"
msgstr ""
"``pythonX.Y-config --ldflags --embed``, bağlantı kurarken size önerilen "
"bayrakları verecektir:"

#: extending/embedding.rst:313
msgid ""
"To avoid confusion between several Python installations (and especially "
"between the system Python and your own compiled Python), it is recommended "
"that you use the absolute path to :file:`python{X.Y}-config`, as in the "
"above example."
msgstr ""
"Birkaç Python kurulumu arasında (ve özellikle sistem Python ile kendi "
"derlenmiş Python'unuz arasında) karışıklığı önlemek için, yukarıdaki örnekte "
"olduğu gibi mutlak :file:`python{X.Y}-config` yolunu kullanmanız önerilir."

#: extending/embedding.rst:318
msgid ""
"If this procedure doesn't work for you (it is not guaranteed to work for all "
"Unix-like platforms; however, we welcome :ref:`bug reports <reporting-"
"bugs>`) you will have to read your system's documentation about dynamic "
"linking and/or examine Python's :file:`Makefile` (use :func:`sysconfig."
"get_makefile_filename` to find its location) and compilation options.  In "
"this case, the :mod:`sysconfig` module is a useful tool to programmatically "
"extract the configuration values that you will want to combine together.  "
"For example:"
msgstr ""
"Bu prosedür sizin için işe yaramazsa (tüm Unix benzeri platformlar için "
"çalışması garanti edilmez; ancak, memnuniyetle karşılıyoruz: :ref:`hata "
"raporları <reporting-bugs>`) dinamik hakkında sisteminizin belgelerini "
"okumanız gerekecektir ve/veya  Python'un :file:`Makefile` (konumunu bulmak "
"için :func:`sysconfig.get_makefile_filename` kullanın) ve derleme "
"seçeneklerini bağlamayı inceleyin. Bu durumda, :mod:`sysconfig` modülü, "
"birleştirmek isteyeceğiniz konfigürasyon değerlerini programlı olarak "
"çıkarmak için kullanışlı bir araçtır. Örneğin:"
